{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"O que \u00e9 esta aplica\u00e7\u00e3o? C.K.F.A \u00e9 uma solu\u00e7\u00e3o para os principais problemas que possam ser ocasionados e encontrados, que alguma fez ja foram solucionados por mim (Alan), neste teremos um resumo de tudo que eu acabe por estudar. Desde diversas tecnologias, design patterns , presets de estruturas e codigos que alguma vez, ja foram codados por mim. Os principais exemplos sobre design patterns encontrados aqui, ter\u00e3o suas exemplifica\u00e7\u00f5es codificadas em C#, pois \u00e9 minha Main Stack , todavia muitos exemplos e how to do 's ser\u00e3o mostrados em diversas linguagens. Espero que o que mostrarei aqui, seja de alguma ajuda, tanto para facilitar a mim mesmo em um futuro, ou a quem necessitar. Boa sorte 1.0 Objetivos Oferecer, a mim mesmo e amigos a quem compartilhar esse monstru\u00e1rio, maneiras simples e resumidas de diversas linguagens usando o m\u00e9todo que eu utilizo ao meu dia a dia para aprender rapidamente, e oferecer presets prontos de codigos, j\u00e1 comentados com seu funcionamento explicado. 2.0 Linguagem Ub\u00edqua Linguagem Ub\u00edqua ou Computa\u00e7\u00e3o Ub\u00edqua pode ser definida por: Computa\u00e7\u00e3o ub\u00edqua tem como objetivo tornar a intera\u00e7\u00e3o humano computador invis\u00edvel, ou seja, integrar a inform\u00e1tica com as a\u00e7\u00f5es e comportamentos naturais das pessoas. N\u00e3o invis\u00edvel como se n\u00e3o pudesse ver, mas, sim de uma forma que as pessoas nem percebam que est\u00e3o dando comandos a um computador, mas como se tivessem conversando com algu\u00e9m. Al\u00e9m disso, os computadores teriam sistemas inteligentes que estariam conectados ou procurando conex\u00e3o o tempo todo, dessa forma tornando-se assim onipresente. fonte : https://pt.wikipedia.org/wiki/Computa%C3%A7%C3%A3o_ub%C3%ADqua Em outras a Linguagem Ub\u00edqua permite que possamos manter a comunica\u00e7\u00e3o da equipe mais padronizada e que possamos nos \"comunicar\" da mesma forma via c\u00f3digo, nomea\u00e7\u00e3o de campos e vari\u00e1veis e por assim vai. 3.0 Como utilizar os topicos Os topicos, est\u00e3o estruturados da seguinte forma: Design Patterns onde explico cada tipo de padroniza\u00e7\u00e3o estrutural de c\u00f3digo que eu ja venha a ter testado ou estudado sobre, maioria se n\u00e3o todos, estar\u00e3o codificados em C#. Presets onde forne\u00e7o diversos presets criados por mim mesmo em diversas linguagens, com o intuito de facilitar e acelerar o desenvolvimento de algo que ja fiz, afinal n\u00e3o precisamos inventar a roda a todo momento. Tecnologias onde explico resumidamente algo sobre cada tecnologia que venha a ser estudada por mim. Neste cada linguagem ter\u00e1 um topico, acompanhado se possivel de bibliotecas que ja utilizei, e frameworks se for o caso. npm install azurite","title":"SQL Server"},{"location":"#o-que-e-esta-aplicacao","text":"C.K.F.A \u00e9 uma solu\u00e7\u00e3o para os principais problemas que possam ser ocasionados e encontrados, que alguma fez ja foram solucionados por mim (Alan), neste teremos um resumo de tudo que eu acabe por estudar. Desde diversas tecnologias, design patterns , presets de estruturas e codigos que alguma vez, ja foram codados por mim. Os principais exemplos sobre design patterns encontrados aqui, ter\u00e3o suas exemplifica\u00e7\u00f5es codificadas em C#, pois \u00e9 minha Main Stack , todavia muitos exemplos e how to do 's ser\u00e3o mostrados em diversas linguagens. Espero que o que mostrarei aqui, seja de alguma ajuda, tanto para facilitar a mim mesmo em um futuro, ou a quem necessitar. Boa sorte","title":"O que \u00e9 esta aplica\u00e7\u00e3o?"},{"location":"#10-objetivos","text":"Oferecer, a mim mesmo e amigos a quem compartilhar esse monstru\u00e1rio, maneiras simples e resumidas de diversas linguagens usando o m\u00e9todo que eu utilizo ao meu dia a dia para aprender rapidamente, e oferecer presets prontos de codigos, j\u00e1 comentados com seu funcionamento explicado.","title":"1.0 Objetivos"},{"location":"#20-linguagem-ubiqua","text":"Linguagem Ub\u00edqua ou Computa\u00e7\u00e3o Ub\u00edqua pode ser definida por: Computa\u00e7\u00e3o ub\u00edqua tem como objetivo tornar a intera\u00e7\u00e3o humano computador invis\u00edvel, ou seja, integrar a inform\u00e1tica com as a\u00e7\u00f5es e comportamentos naturais das pessoas. N\u00e3o invis\u00edvel como se n\u00e3o pudesse ver, mas, sim de uma forma que as pessoas nem percebam que est\u00e3o dando comandos a um computador, mas como se tivessem conversando com algu\u00e9m. Al\u00e9m disso, os computadores teriam sistemas inteligentes que estariam conectados ou procurando conex\u00e3o o tempo todo, dessa forma tornando-se assim onipresente. fonte : https://pt.wikipedia.org/wiki/Computa%C3%A7%C3%A3o_ub%C3%ADqua Em outras a Linguagem Ub\u00edqua permite que possamos manter a comunica\u00e7\u00e3o da equipe mais padronizada e que possamos nos \"comunicar\" da mesma forma via c\u00f3digo, nomea\u00e7\u00e3o de campos e vari\u00e1veis e por assim vai.","title":"2.0 Linguagem Ub\u00edqua"},{"location":"#30-como-utilizar-os-topicos","text":"Os topicos, est\u00e3o estruturados da seguinte forma: Design Patterns onde explico cada tipo de padroniza\u00e7\u00e3o estrutural de c\u00f3digo que eu ja venha a ter testado ou estudado sobre, maioria se n\u00e3o todos, estar\u00e3o codificados em C#. Presets onde forne\u00e7o diversos presets criados por mim mesmo em diversas linguagens, com o intuito de facilitar e acelerar o desenvolvimento de algo que ja fiz, afinal n\u00e3o precisamos inventar a roda a todo momento. Tecnologias onde explico resumidamente algo sobre cada tecnologia que venha a ser estudada por mim. Neste cada linguagem ter\u00e1 um topico, acompanhado se possivel de bibliotecas que ja utilizei, e frameworks se for o caso. npm install azurite","title":"3.0 Como utilizar os topicos"},{"location":"1.0/estrutura-api-csharp/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"API C# DDD"},{"location":"1.0/estrutura-api-csharp/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"1.0/estrutura-api-csharp/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"1.0/estrutura-api-csharp/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"1.0/estrutura-api-csharp/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"1.0/estrutura-api-csharp/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"C%23/csharp-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"C%23/csharp-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"C%23/csharp-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"C%23/csharp-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"C%23/csharp-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"C%23/csharp-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"Docker/docker-main-comands/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Comandos Primordiais"},{"location":"Docker/docker-main-comands/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Docker/docker-main-comands/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Docker/docker-main-comands/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Docker/docker-main-comands/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Docker/docker-main-comands/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"Java/java-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"Java/java-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Java/java-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Java/java-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Java/java-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Java/java-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"Node.js/nodejs-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"Node.js/nodejs-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Node.js/nodejs-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Node.js/nodejs-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Node.js/nodejs-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Node.js/nodejs-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"Python/python-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Estrutura\u00e7\u00e3o API C# _DDD (*Domain Driver Development*)_ (EF Core)"},{"location":"Python/python-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Python/python-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Python/python-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Python/python-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Python/python-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"React/react-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-relat ed"},{"location":"React/react-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"React/react-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"React/react-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"React/react-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"React/react-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"ReactNative/reactnative-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"ReactNative/reactnative-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"ReactNative/reactnative-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"ReactNative/reactnative-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"ReactNative/reactnative-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"ReactNative/reactnative-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"}]}