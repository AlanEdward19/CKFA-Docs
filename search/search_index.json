{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"O que \u00e9 esta aplica\u00e7\u00e3o? C.K.F.A \u00e9 uma solu\u00e7\u00e3o para os principais problemas que possam ser ocasionados e encontrados, que alguma fez ja foram solucionados por mim (Alan), neste teremos um resumo de tudo que eu acabe por estudar. Desde diversas tecnologias, design patterns , presets de estruturas e codigos que alguma vez, ja foram codados por mim. Os principais exemplos sobre design patterns encontrados aqui, ter\u00e3o suas exemplifica\u00e7\u00f5es codificadas em C#, pois \u00e9 minha Main Stack , todavia muitos exemplos e how to do 's ser\u00e3o mostrados em diversas linguagens. Espero que o que mostrarei aqui, seja de alguma ajuda, tanto para facilitar a mim mesmo em um futuro, ou a quem necessitar. Boa sorte 1.0 Objetivos Oferecer, a mim mesmo e amigos a quem compartilhar esse monstru\u00e1rio, maneiras simples e resumidas de diversas linguagens usando o m\u00e9todo que eu utilizo ao meu dia a dia para aprender rapidamente, e oferecer presets prontos de codigos, j\u00e1 comentados com seu funcionamento explicado. 2.0 Linguagem Ub\u00edqua Linguagem Ub\u00edqua ou Computa\u00e7\u00e3o Ub\u00edqua pode ser definida por: Computa\u00e7\u00e3o ub\u00edqua tem como objetivo tornar a intera\u00e7\u00e3o humano computador invis\u00edvel, ou seja, integrar a inform\u00e1tica com as a\u00e7\u00f5es e comportamentos naturais das pessoas. N\u00e3o invis\u00edvel como se n\u00e3o pudesse ver, mas, sim de uma forma que as pessoas nem percebam que est\u00e3o dando comandos a um computador, mas como se tivessem conversando com algu\u00e9m. Al\u00e9m disso, os computadores teriam sistemas inteligentes que estariam conectados ou procurando conex\u00e3o o tempo todo, dessa forma tornando-se assim onipresente. fonte : https://pt.wikipedia.org/wiki/Computa%C3%A7%C3%A3o_ub%C3%ADqua Em outras a Linguagem Ub\u00edqua permite que possamos manter a comunica\u00e7\u00e3o da equipe mais padronizada e que possamos nos \"comunicar\" da mesma forma via c\u00f3digo, nomea\u00e7\u00e3o de campos e vari\u00e1veis e por assim vai. 3.0 Como utilizar os topicos Os topicos, est\u00e3o estruturados da seguinte forma: Design Patterns onde explico cada tipo de padroniza\u00e7\u00e3o estrutural de c\u00f3digo que eu ja venha a ter testado ou estudado sobre, maioria se n\u00e3o todos, estar\u00e3o codificados em C#. Presets onde forne\u00e7o diversos presets criados por mim mesmo em diversas linguagens, com o intuito de facilitar e acelerar o desenvolvimento de algo que ja fiz, afinal n\u00e3o precisamos inventar a roda a todo momento. Tecnologias onde explico resumidamente algo sobre cada tecnologia que venha a ser estudada por mim. Neste cada linguagem ter\u00e1 um topico, acompanhado se possivel de bibliotecas que ja utilizei, e frameworks se for o caso.","title":"Inicio"},{"location":"#o-que-e-esta-aplicacao","text":"C.K.F.A \u00e9 uma solu\u00e7\u00e3o para os principais problemas que possam ser ocasionados e encontrados, que alguma fez ja foram solucionados por mim (Alan), neste teremos um resumo de tudo que eu acabe por estudar. Desde diversas tecnologias, design patterns , presets de estruturas e codigos que alguma vez, ja foram codados por mim. Os principais exemplos sobre design patterns encontrados aqui, ter\u00e3o suas exemplifica\u00e7\u00f5es codificadas em C#, pois \u00e9 minha Main Stack , todavia muitos exemplos e how to do 's ser\u00e3o mostrados em diversas linguagens. Espero que o que mostrarei aqui, seja de alguma ajuda, tanto para facilitar a mim mesmo em um futuro, ou a quem necessitar. Boa sorte","title":"O que \u00e9 esta aplica\u00e7\u00e3o?"},{"location":"#10-objetivos","text":"Oferecer, a mim mesmo e amigos a quem compartilhar esse monstru\u00e1rio, maneiras simples e resumidas de diversas linguagens usando o m\u00e9todo que eu utilizo ao meu dia a dia para aprender rapidamente, e oferecer presets prontos de codigos, j\u00e1 comentados com seu funcionamento explicado.","title":"1.0 Objetivos"},{"location":"#20-linguagem-ubiqua","text":"Linguagem Ub\u00edqua ou Computa\u00e7\u00e3o Ub\u00edqua pode ser definida por: Computa\u00e7\u00e3o ub\u00edqua tem como objetivo tornar a intera\u00e7\u00e3o humano computador invis\u00edvel, ou seja, integrar a inform\u00e1tica com as a\u00e7\u00f5es e comportamentos naturais das pessoas. N\u00e3o invis\u00edvel como se n\u00e3o pudesse ver, mas, sim de uma forma que as pessoas nem percebam que est\u00e3o dando comandos a um computador, mas como se tivessem conversando com algu\u00e9m. Al\u00e9m disso, os computadores teriam sistemas inteligentes que estariam conectados ou procurando conex\u00e3o o tempo todo, dessa forma tornando-se assim onipresente. fonte : https://pt.wikipedia.org/wiki/Computa%C3%A7%C3%A3o_ub%C3%ADqua Em outras a Linguagem Ub\u00edqua permite que possamos manter a comunica\u00e7\u00e3o da equipe mais padronizada e que possamos nos \"comunicar\" da mesma forma via c\u00f3digo, nomea\u00e7\u00e3o de campos e vari\u00e1veis e por assim vai.","title":"2.0 Linguagem Ub\u00edqua"},{"location":"#30-como-utilizar-os-topicos","text":"Os topicos, est\u00e3o estruturados da seguinte forma: Design Patterns onde explico cada tipo de padroniza\u00e7\u00e3o estrutural de c\u00f3digo que eu ja venha a ter testado ou estudado sobre, maioria se n\u00e3o todos, estar\u00e3o codificados em C#. Presets onde forne\u00e7o diversos presets criados por mim mesmo em diversas linguagens, com o intuito de facilitar e acelerar o desenvolvimento de algo que ja fiz, afinal n\u00e3o precisamos inventar a roda a todo momento. Tecnologias onde explico resumidamente algo sobre cada tecnologia que venha a ser estudada por mim. Neste cada linguagem ter\u00e1 um topico, acompanhado se possivel de bibliotecas que ja utilizei, e frameworks se for o caso.","title":"3.0 Como utilizar os topicos"},{"location":"1.0/estrutura-api-csharp/","text":"C# DDD ( Domain Driver Development ) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 3 partes, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"API C# DDD"},{"location":"1.0/estrutura-api-csharp/#c-ddd-domain-driver-development","text":"O que \u00e9 DDD","title":"C# DDD (Domain Driver Development)"},{"location":"1.0/estrutura-api-csharp/#10-estrutura","text":"A API \u00e9 repartida em 3 partes, sendo elas:","title":"1.0 Estrutura"},{"location":"1.0/estrutura-api-csharp/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"1.0/estrutura-api-csharp/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"1.0/estrutura-api-csharp/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"1.0/mvc_pattern/","text":"MVC Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"MVC Pattern"},{"location":"1.0/mvc_pattern/#mvc-pattern","text":"","title":"MVC Pattern"},{"location":"1.0/mvc_pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/repository-pattern/","text":"Repository Pattern Um dos padr\u00f5es de projeto mais utilizado e conhecido no desenvolvimento de software. Esse padr\u00e3o contribui no isolamento da camada de acesso a dados (DAL) com a camada de neg\u00f3cio, conhecida como camada de dom\u00ednio. Ele permite encapsulamento da l\u00f3gica de acesso a dados, utilizando a inje\u00e7\u00e3o de dependencia e proporcionando uma vis\u00e3o mais orientada a objetos. Com esse pattern , aplicamos o principio da persistencia ignorante , ou seja nossas entidades (classes), n\u00e3o devem sofrer impactos pela forma em que s\u00e3o persistidas no banco de dados. 1.0 Beneficios deste padr\u00e3o de codigo Permitir a troca do banco de dados utilizado sem afetar o sistema como um todo. C\u00f3digo centralizado em um \u00fanico ponto, evitando duplicidade. Facilita a implementa\u00e7\u00e3o de testes unit\u00e1rios. Diminui o acoplamento entre classes. Padroniza\u00e7\u00e3o de c\u00f3digos e servi\u00e7os. 1.1 Como utilizar esse Pattern Devemos como primeiro caso, definir nossa entidade (classe) 1.2 Criar entidade namespace RepositoryPatternExemplo { public class Cliente { public string Nome { get ; private set ; } public string Sobrenome { get ; private set ; } public string Cargo { get ; private set ; } } } 1.3 Criar Interface do repositorio namespace RepositoryPatternExemplo.Interfaces { public interface IClienteRepository { Cliente Get ( int IdCliente ); Cliente GetAll ( int IdCliente ); bool Save ( Cliente cliente ); bool Update ( Cliente cliente ); bool Delete ( Cliente cliente ); } } Podendo ainda ser substituido por sua vers\u00e3o generica. public interface IEntidadeGenerica < TEntity > { TEntity Get ( int IdCliente ); TEntity GetAll ( int IdCliente ); bool Save ( TEntity cliente ); bool Update ( TEntity cliente ); bool Delete ( TEntity cliente ); } 1.3 Criar repositorio using RepositoryPatternExemplo ; using RepositoryPatternExemplo.Interfaces ; using System ; namespace RepositoryPatternExemplo.Repository { public class ClienteRepository : IClienteRepository { public bool Delete ( Cliente cliente ) { // C\u00f3digo para deletar um cliente } public Cliente Get ( int IdCliente ) { // C\u00f3digo para obter um cliente pelo Id } public Cliente GetAll ( int IdCliente ) { // C\u00f3digo para obter todos os clientes } public bool Save ( Cliente cliente ) { // C\u00f3digo para salvar um novo cliente } public bool Update ( Cliente cliente ) { // C\u00f3digo para editar um cliente } } } 1.4 Ap\u00f3s isso Agora \u00e9 so chamar a interface no seu codigo e chamar seus metodos. Para exemplos de codigos com banco em c#, pode acessar a aba de database related, nas linguagens disponiveis.","title":"Repository Pattern"},{"location":"1.0/repository-pattern/#repository-pattern","text":"Um dos padr\u00f5es de projeto mais utilizado e conhecido no desenvolvimento de software. Esse padr\u00e3o contribui no isolamento da camada de acesso a dados (DAL) com a camada de neg\u00f3cio, conhecida como camada de dom\u00ednio. Ele permite encapsulamento da l\u00f3gica de acesso a dados, utilizando a inje\u00e7\u00e3o de dependencia e proporcionando uma vis\u00e3o mais orientada a objetos. Com esse pattern , aplicamos o principio da persistencia ignorante , ou seja nossas entidades (classes), n\u00e3o devem sofrer impactos pela forma em que s\u00e3o persistidas no banco de dados.","title":"Repository Pattern"},{"location":"1.0/repository-pattern/#10-beneficios-deste-padrao-de-codigo","text":"Permitir a troca do banco de dados utilizado sem afetar o sistema como um todo. C\u00f3digo centralizado em um \u00fanico ponto, evitando duplicidade. Facilita a implementa\u00e7\u00e3o de testes unit\u00e1rios. Diminui o acoplamento entre classes. Padroniza\u00e7\u00e3o de c\u00f3digos e servi\u00e7os.","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/repository-pattern/#11-como-utilizar-esse-pattern","text":"Devemos como primeiro caso, definir nossa entidade (classe)","title":"1.1 Como utilizar esse Pattern"},{"location":"1.0/repository-pattern/#12-criar-entidade","text":"namespace RepositoryPatternExemplo { public class Cliente { public string Nome { get ; private set ; } public string Sobrenome { get ; private set ; } public string Cargo { get ; private set ; } } }","title":"1.2 Criar entidade"},{"location":"1.0/repository-pattern/#13-criar-interface-do-repositorio","text":"namespace RepositoryPatternExemplo.Interfaces { public interface IClienteRepository { Cliente Get ( int IdCliente ); Cliente GetAll ( int IdCliente ); bool Save ( Cliente cliente ); bool Update ( Cliente cliente ); bool Delete ( Cliente cliente ); } } Podendo ainda ser substituido por sua vers\u00e3o generica. public interface IEntidadeGenerica < TEntity > { TEntity Get ( int IdCliente ); TEntity GetAll ( int IdCliente ); bool Save ( TEntity cliente ); bool Update ( TEntity cliente ); bool Delete ( TEntity cliente ); }","title":"1.3 Criar Interface do repositorio"},{"location":"1.0/repository-pattern/#13-criar-repositorio","text":"using RepositoryPatternExemplo ; using RepositoryPatternExemplo.Interfaces ; using System ; namespace RepositoryPatternExemplo.Repository { public class ClienteRepository : IClienteRepository { public bool Delete ( Cliente cliente ) { // C\u00f3digo para deletar um cliente } public Cliente Get ( int IdCliente ) { // C\u00f3digo para obter um cliente pelo Id } public Cliente GetAll ( int IdCliente ) { // C\u00f3digo para obter todos os clientes } public bool Save ( Cliente cliente ) { // C\u00f3digo para salvar um novo cliente } public bool Update ( Cliente cliente ) { // C\u00f3digo para editar um cliente } } }","title":"1.3 Criar repositorio"},{"location":"1.0/repository-pattern/#14-apos-isso","text":"Agora \u00e9 so chamar a interface no seu codigo e chamar seus metodos. Para exemplos de codigos com banco em c#, pode acessar a aba de database related, nas linguagens disponiveis.","title":"1.4 Ap\u00f3s isso"},{"location":"1.0/tdd-pattern/","text":"TDD Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"TDD Pattern"},{"location":"1.0/tdd-pattern/#tdd-pattern","text":"","title":"TDD Pattern"},{"location":"1.0/tdd-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/chain-of-resp-pattern/","text":"Chain of Responsability Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Chain of Resp"},{"location":"1.0/behavioral%20pattern/chain-of-resp-pattern/#chain-of-responsability-pattern","text":"","title":"Chain of Responsability Pattern"},{"location":"1.0/behavioral%20pattern/chain-of-resp-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/command-pattern/","text":"Command Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Command"},{"location":"1.0/behavioral%20pattern/command-pattern/#command-pattern","text":"","title":"Command Pattern"},{"location":"1.0/behavioral%20pattern/command-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/interpreter-pattern/","text":"Interpreter Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Interpreter"},{"location":"1.0/behavioral%20pattern/interpreter-pattern/#interpreter-pattern","text":"","title":"Interpreter Pattern"},{"location":"1.0/behavioral%20pattern/interpreter-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/iterator-pattern/","text":"Iterator Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Iterator"},{"location":"1.0/behavioral%20pattern/iterator-pattern/#iterator-pattern","text":"","title":"Iterator Pattern"},{"location":"1.0/behavioral%20pattern/iterator-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/mediator-pattern/","text":"Mediator Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Mediator"},{"location":"1.0/behavioral%20pattern/mediator-pattern/#mediator-pattern","text":"","title":"Mediator Pattern"},{"location":"1.0/behavioral%20pattern/mediator-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/memento-pattern/","text":"Memento Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Memento"},{"location":"1.0/behavioral%20pattern/memento-pattern/#memento-pattern","text":"","title":"Memento Pattern"},{"location":"1.0/behavioral%20pattern/memento-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/observer-pattern/","text":"Observer Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Observer"},{"location":"1.0/behavioral%20pattern/observer-pattern/#observer-pattern","text":"","title":"Observer Pattern"},{"location":"1.0/behavioral%20pattern/observer-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/state-pattern/","text":"State Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"State"},{"location":"1.0/behavioral%20pattern/state-pattern/#state-pattern","text":"","title":"State Pattern"},{"location":"1.0/behavioral%20pattern/state-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/strategy-pattern/","text":"Strategy Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Strategy"},{"location":"1.0/behavioral%20pattern/strategy-pattern/#strategy-pattern","text":"","title":"Strategy Pattern"},{"location":"1.0/behavioral%20pattern/strategy-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/template-method-pattern/","text":"Template Method Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Template Method"},{"location":"1.0/behavioral%20pattern/template-method-pattern/#template-method-pattern","text":"","title":"Template Method Pattern"},{"location":"1.0/behavioral%20pattern/template-method-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/visitor-pattern/","text":"Visitor Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Visitor"},{"location":"1.0/behavioral%20pattern/visitor-pattern/#visitor-pattern","text":"","title":"Visitor Pattern"},{"location":"1.0/behavioral%20pattern/visitor-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/abstract-pattern/","text":"Abstract Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Abstract Factory"},{"location":"1.0/creational%20pattern/abstract-pattern/#abstract-pattern","text":"","title":"Abstract Pattern"},{"location":"1.0/creational%20pattern/abstract-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/builder-pattern/","text":"Builder Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Builder"},{"location":"1.0/creational%20pattern/builder-pattern/#builder-pattern","text":"","title":"Builder Pattern"},{"location":"1.0/creational%20pattern/builder-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/factory-method-pattern/","text":"Factory Method Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Factory Method"},{"location":"1.0/creational%20pattern/factory-method-pattern/#factory-method-pattern","text":"","title":"Factory Method Pattern"},{"location":"1.0/creational%20pattern/factory-method-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/prototype-pattern/","text":"Prototype Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Prototype"},{"location":"1.0/creational%20pattern/prototype-pattern/#prototype-pattern","text":"","title":"Prototype Pattern"},{"location":"1.0/creational%20pattern/prototype-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/singleton-pattern/","text":"Singleton Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Singleton"},{"location":"1.0/creational%20pattern/singleton-pattern/#singleton-pattern","text":"","title":"Singleton Pattern"},{"location":"1.0/creational%20pattern/singleton-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/adapter-pattern/","text":"Adapter Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Adapter"},{"location":"1.0/structural%20pattern/adapter-pattern/#adapter-pattern","text":"","title":"Adapter Pattern"},{"location":"1.0/structural%20pattern/adapter-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/bridge-pattern/","text":"Bridge Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Bridge"},{"location":"1.0/structural%20pattern/bridge-pattern/#bridge-pattern","text":"","title":"Bridge Pattern"},{"location":"1.0/structural%20pattern/bridge-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/composite-pattern/","text":"Composite Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Composite"},{"location":"1.0/structural%20pattern/composite-pattern/#composite-pattern","text":"","title":"Composite Pattern"},{"location":"1.0/structural%20pattern/composite-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/decorator-pattern/","text":"Decorator Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Decorator"},{"location":"1.0/structural%20pattern/decorator-pattern/#decorator-pattern","text":"","title":"Decorator Pattern"},{"location":"1.0/structural%20pattern/decorator-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/facade-pattern/","text":"Facade Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Facade"},{"location":"1.0/structural%20pattern/facade-pattern/#facade-pattern","text":"","title":"Facade Pattern"},{"location":"1.0/structural%20pattern/facade-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/flyweight-pattern/","text":"Fly Weight Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Flyweight"},{"location":"1.0/structural%20pattern/flyweight-pattern/#fly-weight-pattern","text":"","title":"Fly Weight Pattern"},{"location":"1.0/structural%20pattern/flyweight-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/proxy-pattern/","text":"Proxy Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Proxy"},{"location":"1.0/structural%20pattern/proxy-pattern/#proxy-pattern","text":"","title":"Proxy Pattern"},{"location":"1.0/structural%20pattern/proxy-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"C%23/csharp-database-related/","text":"C# - Database related content 1.0 Topicos a serem abordados nesta pagina Aqui encontrar\u00e1 diversos metodos e maneiras de se usar para conectar-se ao banco de dados na linguagem C# 1.1 Via Console Application Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Console Application 1.1.1 Requerimentos Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Microsoft.Data.SqlClient ou System.Data.SqlClient Referencia a uma SqlConnection, que nos exemplos a seguir, usaremos o nome de _connection. Estaremos acessando uma tabela fictica chamada funcionarios. 1.1.2 Abrir conex\u00e3o Primeira coisa que devemos fazer antes de processeguir \u00e9 abrir a conex\u00e3o, para assim podermos acessar e manipular nosso banco de dados. Estamos alocando o c\u00f3digo a seguir dentro de um try catch para podermos isolar possiveis erros. try { Console . WriteLine ( \"Tentando Abrir conex\u00e3o com banco..\" ); if ( _connection . State == System . Data . ConnectionState . Closed ) { _connection . Open (); } Console . WriteLine ( \"Conex\u00e3o Aberta!\" ); Console . Clear (); } catch ( SqlException e ) { Console . WriteLine ( $\"Erro: {e.Message}\" ); Console . WriteLine ( \"Pressione qualquer tecla para continuar!\" ); Console . ReadKey (); } 1.1.3 SelectAll No c\u00f3digo a seguir, implementaremos um selectAll (trazer todos os dados, sem especifica\u00e7\u00e3o) var strBuilder = new StringBuilder (); strBuilder . Append ( \"select * from Funcionario\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); } 1.1.4 Select No c\u00f3digo a seguir, implementaremos um select comum, utilizando uma fonte de pesquisa. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"select * from Funcionario where nome like N'{nome}%';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); } 1.1.5 Insert No c\u00f3digo a seguir, implementaremos um insert dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( \"insert into Funcionario (nome, cpf, endereco, telefone, cargo) values \" ); strBuilder . Append ( $\"(N'{funcionario.nome}',N'{funcionario.cpf}',N'{funcionario.endereco}',N'{funcionario.telefone}',N'{funcionario.cargo}')\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario {funcionario.nome} Inserido!!\" ); } 1.1.6 Update No c\u00f3digo a seguir, implementaremos um update dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"update Funcionario set nome = N'{funcionario.nome}' , cpf = N'{funcionario.cpf}', endereco = N'{funcionario.endereco}', telefone = N'{funcionario.telefone}', cargo = N'{funcionario.cargo}' where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario Antigo nome: {nome}\\nFuncionario Novo nome: {funcionario.nome}\" ); } 1.1.7 Delete No c\u00f3digo a seguir, implementaremos um delete dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"delete from Funcionario where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { Console . WriteLine ( $\"Funcionario: {nome} foi deletado!!\" ); Console . WriteLine ( \"Deseja reverter?\" ); var resposta = Console . ReadLine (); if ( resposta . ToLower () == \"sim\" || resposta . ToLower () == \"s\" ) { Console . WriteLine ( $\"Funcionario: {nome} foi recuperado!!\" ); } else { command . ExecuteNonQuery (); } } 1.2 Via Entity Framework Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Entity Framework Core. 1.2.1 Requerimentos Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Entity Framework Core for SQL Server. 1.3 Via Dapper Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Dapper. 1.3.1 Requerimentos Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Dapper.","title":"Database-related"},{"location":"C%23/csharp-database-related/#c-database-related-content","text":"","title":"C# - Database related content"},{"location":"C%23/csharp-database-related/#10-topicos-a-serem-abordados-nesta-pagina","text":"Aqui encontrar\u00e1 diversos metodos e maneiras de se usar para conectar-se ao banco de dados na linguagem C#","title":"1.0 Topicos a serem abordados nesta pagina"},{"location":"C%23/csharp-database-related/#11-via-console-application","text":"Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Console Application","title":"1.1 Via Console Application"},{"location":"C%23/csharp-database-related/#111-requerimentos","text":"Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Microsoft.Data.SqlClient ou System.Data.SqlClient Referencia a uma SqlConnection, que nos exemplos a seguir, usaremos o nome de _connection. Estaremos acessando uma tabela fictica chamada funcionarios.","title":"1.1.1 Requerimentos"},{"location":"C%23/csharp-database-related/#112-abrir-conexao","text":"Primeira coisa que devemos fazer antes de processeguir \u00e9 abrir a conex\u00e3o, para assim podermos acessar e manipular nosso banco de dados. Estamos alocando o c\u00f3digo a seguir dentro de um try catch para podermos isolar possiveis erros. try { Console . WriteLine ( \"Tentando Abrir conex\u00e3o com banco..\" ); if ( _connection . State == System . Data . ConnectionState . Closed ) { _connection . Open (); } Console . WriteLine ( \"Conex\u00e3o Aberta!\" ); Console . Clear (); } catch ( SqlException e ) { Console . WriteLine ( $\"Erro: {e.Message}\" ); Console . WriteLine ( \"Pressione qualquer tecla para continuar!\" ); Console . ReadKey (); }","title":"1.1.2 Abrir conex\u00e3o"},{"location":"C%23/csharp-database-related/#113-selectall","text":"No c\u00f3digo a seguir, implementaremos um selectAll (trazer todos os dados, sem especifica\u00e7\u00e3o) var strBuilder = new StringBuilder (); strBuilder . Append ( \"select * from Funcionario\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); }","title":"1.1.3 SelectAll"},{"location":"C%23/csharp-database-related/#114-select","text":"No c\u00f3digo a seguir, implementaremos um select comum, utilizando uma fonte de pesquisa. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"select * from Funcionario where nome like N'{nome}%';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); }","title":"1.1.4 Select"},{"location":"C%23/csharp-database-related/#115-insert","text":"No c\u00f3digo a seguir, implementaremos um insert dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( \"insert into Funcionario (nome, cpf, endereco, telefone, cargo) values \" ); strBuilder . Append ( $\"(N'{funcionario.nome}',N'{funcionario.cpf}',N'{funcionario.endereco}',N'{funcionario.telefone}',N'{funcionario.cargo}')\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario {funcionario.nome} Inserido!!\" ); }","title":"1.1.5 Insert"},{"location":"C%23/csharp-database-related/#116-update","text":"No c\u00f3digo a seguir, implementaremos um update dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"update Funcionario set nome = N'{funcionario.nome}' , cpf = N'{funcionario.cpf}', endereco = N'{funcionario.endereco}', telefone = N'{funcionario.telefone}', cargo = N'{funcionario.cargo}' where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario Antigo nome: {nome}\\nFuncionario Novo nome: {funcionario.nome}\" ); }","title":"1.1.6 Update"},{"location":"C%23/csharp-database-related/#117-delete","text":"No c\u00f3digo a seguir, implementaremos um delete dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"delete from Funcionario where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { Console . WriteLine ( $\"Funcionario: {nome} foi deletado!!\" ); Console . WriteLine ( \"Deseja reverter?\" ); var resposta = Console . ReadLine (); if ( resposta . ToLower () == \"sim\" || resposta . ToLower () == \"s\" ) { Console . WriteLine ( $\"Funcionario: {nome} foi recuperado!!\" ); } else { command . ExecuteNonQuery (); } }","title":"1.1.7 Delete"},{"location":"C%23/csharp-database-related/#12-via-entity-framework","text":"Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Entity Framework Core.","title":"1.2 Via Entity Framework"},{"location":"C%23/csharp-database-related/#121-requerimentos","text":"Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Entity Framework Core for SQL Server.","title":"1.2.1 Requerimentos"},{"location":"C%23/csharp-database-related/#13-via-dapper","text":"Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Dapper.","title":"1.3 Via Dapper"},{"location":"C%23/csharp-database-related/#131-requerimentos","text":"Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Dapper.","title":"1.3.1 Requerimentos"},{"location":"Docker/docker-main-comands/","text":"Principais Comandos do Docker O que \u00e9 Docker? Docker \u00e9 um sistema de virtualiza\u00e7\u00e3o n\u00e3o convencional, diferente de uma VM ( virtual machine ), docker utiliza o conceito de Conteiners para isolar um ambiente de desenvolvimento e suas dependencias. O que \u00e9 container? 1.0 Adquirir uma imagem Para podermos acessar uma imagem, utilizaremos os seguinte comando: Por padr\u00e3o o docker faz pull de suas imagens atrav\u00e9s do docker hub docker pull \"Image name\" ex: docker pull redis 1.1 Rodar uma imagem Para podermos rodar uma imagem, utilizaremos os seguinte comando: docker run \"Image name\" ex: docker run redis Um comando secundario a esse, seria especificar a porta antes de executar o comando. utilizando o -p docker run -p 6379 :6379 redis 1.2 Enviar uma imagem Para podermos enviar uma imagem, utilizaremos os seguinte comando: docker pull \"Image name\" ex: docker pull redis Este comando \u00e9 utilizado para enviar uma imagem para o repositorio docker hub.","title":"Comandos Primordiais"},{"location":"Docker/docker-main-comands/#principais-comandos-do-docker","text":"","title":"Principais Comandos do Docker"},{"location":"Docker/docker-main-comands/#o-que-e-docker","text":"Docker \u00e9 um sistema de virtualiza\u00e7\u00e3o n\u00e3o convencional, diferente de uma VM ( virtual machine ), docker utiliza o conceito de Conteiners para isolar um ambiente de desenvolvimento e suas dependencias. O que \u00e9 container?","title":"O que \u00e9 Docker?"},{"location":"Docker/docker-main-comands/#10-adquirir-uma-imagem","text":"Para podermos acessar uma imagem, utilizaremos os seguinte comando: Por padr\u00e3o o docker faz pull de suas imagens atrav\u00e9s do docker hub docker pull \"Image name\" ex: docker pull redis","title":"1.0 Adquirir uma imagem"},{"location":"Docker/docker-main-comands/#11-rodar-uma-imagem","text":"Para podermos rodar uma imagem, utilizaremos os seguinte comando: docker run \"Image name\" ex: docker run redis Um comando secundario a esse, seria especificar a porta antes de executar o comando. utilizando o -p docker run -p 6379 :6379 redis","title":"1.1 Rodar uma imagem"},{"location":"Docker/docker-main-comands/#12-enviar-uma-imagem","text":"Para podermos enviar uma imagem, utilizaremos os seguinte comando: docker pull \"Image name\" ex: docker pull redis Este comando \u00e9 utilizado para enviar uma imagem para o repositorio docker hub.","title":"1.2 Enviar uma imagem"},{"location":"Java/java-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"Java/java-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Java/java-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Java/java-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Java/java-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Java/java-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"Node.js/nodejs-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"Node.js/nodejs-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Node.js/nodejs-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Node.js/nodejs-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Node.js/nodejs-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Node.js/nodejs-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"Python/python-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Estrutura\u00e7\u00e3o API C# _DDD (*Domain Driver Development*)_ (EF Core)"},{"location":"Python/python-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"Python/python-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"Python/python-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"Python/python-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"Python/python-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"React/react-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"React/react-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"React/react-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"React/react-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"React/react-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"React/react-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"ReactNative/reactnative-database-related/","text":"Estrutura\u00e7\u00e3o API C# DDD ( Domain Driver Development ) (EF Core) O que \u00e9 DDD 1.0 Estrutura A API \u00e9 repartida em 6 pastas, sendo elas: 1.1 Domain (Dom\u00ednio) \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 1.2 Infra (Infraestrutura) Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros. 1.3 Presentation (Apresenta\u00e7\u00e3o) Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"Database-related"},{"location":"ReactNative/reactnative-database-related/#estruturacao-api-c-ddd-domain-driver-development-ef-core","text":"O que \u00e9 DDD","title":"Estrutura\u00e7\u00e3o API C# DDD (Domain Driver Development) (EF Core)"},{"location":"ReactNative/reactnative-database-related/#10-estrutura","text":"A API \u00e9 repartida em 6 pastas, sendo elas:","title":"1.0 Estrutura"},{"location":"ReactNative/reactnative-database-related/#11-domain-dominio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ), classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"1.1 Domain (Dom\u00ednio)"},{"location":"ReactNative/reactnative-database-related/#12-infra-infraestrutura","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos entre outros.","title":"1.2 Infra (Infraestrutura)"},{"location":"ReactNative/reactnative-database-related/#13-presentation-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"1.3 Presentation (Apresenta\u00e7\u00e3o)"},{"location":"SQL/create-index/","text":"Criar Index 1.0 Quais os beneficios de se criar um index?","title":"Cria\u00e7\u00e3o de Index"},{"location":"SQL/create-index/#criar-index","text":"","title":"Criar Index"},{"location":"SQL/create-index/#10-quais-os-beneficios-de-se-criar-um-index","text":"","title":"1.0 Quais os beneficios de se criar um index?"},{"location":"SQL/non-relational-database/","text":"NO-SQL (No relational Database)","title":"Banco n\u00e3o relacional"},{"location":"SQL/non-relational-database/#no-sql-no-relational-database","text":"","title":"NO-SQL (No relational Database)"},{"location":"SQL/relational-database/","text":"Relacional Database","title":"Banco relacional"},{"location":"SQL/relational-database/#relacional-database","text":"","title":"Relacional Database"},{"location":"logic/data-structure/","text":"Estrutura de Dados","title":"Estrutura de dados"},{"location":"logic/data-structure/#estrutura-de-dados","text":"","title":"Estrutura de Dados"}]}