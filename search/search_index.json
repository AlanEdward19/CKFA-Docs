{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"O que \u00e9 esta aplica\u00e7\u00e3o? C.K.F.A \u00e9 uma solu\u00e7\u00e3o para os principais problemas que possam ser ocasionados e encontrados, que alguma fez ja foram solucionados por mim (Alan), neste teremos um resumo de tudo que eu acabe por estudar. Desde diversas tecnologias, design patterns , presets de estruturas e codigos que alguma vez, ja foram codados por mim. Os principais exemplos sobre design patterns encontrados aqui, ter\u00e3o suas exemplifica\u00e7\u00f5es codificadas em C#, pois \u00e9 minha Main Stack , todavia muitos exemplos e how to do 's ser\u00e3o mostrados em diversas linguagens. Espero que o que mostrarei aqui, seja de alguma ajuda, tanto para facilitar a mim mesmo em um futuro, ou a quem necessitar. Boa sorte 1.0 Objetivos Oferecer, a mim mesmo e amigos a quem compartilhar esse monstru\u00e1rio, maneiras simples e resumidas de diversas linguagens usando o m\u00e9todo que eu utilizo ao meu dia a dia para aprender rapidamente, e oferecer presets prontos de codigos, j\u00e1 comentados com seu funcionamento explicado. 2.0 Linguagem Ub\u00edqua Linguagem Ub\u00edqua ou Computa\u00e7\u00e3o Ub\u00edqua pode ser definida por: Computa\u00e7\u00e3o ub\u00edqua tem como objetivo tornar a intera\u00e7\u00e3o humano computador invis\u00edvel, ou seja, integrar a inform\u00e1tica com as a\u00e7\u00f5es e comportamentos naturais das pessoas. N\u00e3o invis\u00edvel como se n\u00e3o pudesse ver, mas, sim de uma forma que as pessoas nem percebam que est\u00e3o dando comandos a um computador, mas como se tivessem conversando com algu\u00e9m. Al\u00e9m disso, os computadores teriam sistemas inteligentes que estariam conectados ou procurando conex\u00e3o o tempo todo, dessa forma tornando-se assim onipresente. Fonte Em outras a Linguagem Ub\u00edqua permite que possamos manter a comunica\u00e7\u00e3o da equipe mais padronizada e que possamos nos \"comunicar\" da mesma forma via c\u00f3digo, nomea\u00e7\u00e3o de campos e vari\u00e1veis e por assim vai. 3.0 Como utilizar os topicos Os topicos, est\u00e3o estruturados da seguinte forma: Design Patterns onde explico cada tipo de padroniza\u00e7\u00e3o estrutural de c\u00f3digo que eu ja venha a ter testado ou estudado sobre, maioria se n\u00e3o todos, estar\u00e3o codificados em C#. Presets onde forne\u00e7o diversos presets criados por mim mesmo em diversas linguagens, com o intuito de facilitar e acelerar o desenvolvimento de algo que ja fiz, afinal n\u00e3o precisamos inventar a roda a todo momento. Tecnologias onde explico resumidamente algo sobre cada tecnologia que venha a ser estudada por mim. Neste cada linguagem ter\u00e1 um topico, acompanhado se possivel de bibliotecas que ja utilizei, e frameworks se for o caso.","title":"Inicio"},{"location":"#o-que-e-esta-aplicacao","text":"C.K.F.A \u00e9 uma solu\u00e7\u00e3o para os principais problemas que possam ser ocasionados e encontrados, que alguma fez ja foram solucionados por mim (Alan), neste teremos um resumo de tudo que eu acabe por estudar. Desde diversas tecnologias, design patterns , presets de estruturas e codigos que alguma vez, ja foram codados por mim. Os principais exemplos sobre design patterns encontrados aqui, ter\u00e3o suas exemplifica\u00e7\u00f5es codificadas em C#, pois \u00e9 minha Main Stack , todavia muitos exemplos e how to do 's ser\u00e3o mostrados em diversas linguagens. Espero que o que mostrarei aqui, seja de alguma ajuda, tanto para facilitar a mim mesmo em um futuro, ou a quem necessitar. Boa sorte","title":"O que \u00e9 esta aplica\u00e7\u00e3o?"},{"location":"#10-objetivos","text":"Oferecer, a mim mesmo e amigos a quem compartilhar esse monstru\u00e1rio, maneiras simples e resumidas de diversas linguagens usando o m\u00e9todo que eu utilizo ao meu dia a dia para aprender rapidamente, e oferecer presets prontos de codigos, j\u00e1 comentados com seu funcionamento explicado.","title":"1.0 Objetivos"},{"location":"#20-linguagem-ubiqua","text":"Linguagem Ub\u00edqua ou Computa\u00e7\u00e3o Ub\u00edqua pode ser definida por: Computa\u00e7\u00e3o ub\u00edqua tem como objetivo tornar a intera\u00e7\u00e3o humano computador invis\u00edvel, ou seja, integrar a inform\u00e1tica com as a\u00e7\u00f5es e comportamentos naturais das pessoas. N\u00e3o invis\u00edvel como se n\u00e3o pudesse ver, mas, sim de uma forma que as pessoas nem percebam que est\u00e3o dando comandos a um computador, mas como se tivessem conversando com algu\u00e9m. Al\u00e9m disso, os computadores teriam sistemas inteligentes que estariam conectados ou procurando conex\u00e3o o tempo todo, dessa forma tornando-se assim onipresente. Fonte Em outras a Linguagem Ub\u00edqua permite que possamos manter a comunica\u00e7\u00e3o da equipe mais padronizada e que possamos nos \"comunicar\" da mesma forma via c\u00f3digo, nomea\u00e7\u00e3o de campos e vari\u00e1veis e por assim vai.","title":"2.0 Linguagem Ub\u00edqua"},{"location":"#30-como-utilizar-os-topicos","text":"Os topicos, est\u00e3o estruturados da seguinte forma: Design Patterns onde explico cada tipo de padroniza\u00e7\u00e3o estrutural de c\u00f3digo que eu ja venha a ter testado ou estudado sobre, maioria se n\u00e3o todos, estar\u00e3o codificados em C#. Presets onde forne\u00e7o diversos presets criados por mim mesmo em diversas linguagens, com o intuito de facilitar e acelerar o desenvolvimento de algo que ja fiz, afinal n\u00e3o precisamos inventar a roda a todo momento. Tecnologias onde explico resumidamente algo sobre cada tecnologia que venha a ser estudada por mim. Neste cada linguagem ter\u00e1 um topico, acompanhado se possivel de bibliotecas que ja utilizei, e frameworks se for o caso.","title":"3.0 Como utilizar os topicos"},{"location":"changelog/","text":"Changelog Todas as altera\u00e7\u00f5es notaveis feita neste documento, ser\u00e3o passadas para essa aba. 1.0.0 - 02/11/2022 Altera\u00e7\u00e3o Inicial A partir desta data, todas as altera\u00e7\u00f5es come\u00e7aram a ser mantidas e atualizadas em um local especifico, para controle de data e do que foi feito. No dia 02/11/2022 foram adicionadas: Aba de changelog . Informa\u00e7\u00f5es sobre desenvolvimento DDD . Adicionado nova aba, para futuras informa\u00e7\u00f5es sobre microservi\u00e7os. 2.0.0 - 05/11/2022 Informa\u00e7\u00f5es sobre MVC Nesta data, foram adicionadas informa\u00e7\u00f5es sobre o padr\u00e3o de arquitetura MVC. No dia 05/11/2022 foram adicionadas: Pagina de padr\u00e3o de arquitetura MVC. Informa\u00e7\u00f5es sobre desenvolvimento MVC . Consertado indices errados na pagina de DDD . 3.0.0 - 06/11/2022 Informa\u00e7\u00f5es sobre TDD Nesta data, foram adicionadas informa\u00e7\u00f5es sobre o padr\u00e3o de desenvolvimento TDD. No dia 06/11/2022 foram adicionadas: Pagina de padr\u00e3o de desenvolvimento TDD. Informa\u00e7\u00f5es sobre desenvolvimento TDD . 3.0.1 - 06/11/2022 Exemplos novos em c# database related Nesta data, foram adicionadas novos exemplos sobre o utiliza\u00e7\u00e3o do EF Core. No dia 06/11/2022 foram adicionadas: Mais exemplos na pagina de C# Database related, com EF Core.","title":"Altera\u00e7\u00f5es"},{"location":"changelog/#changelog","text":"Todas as altera\u00e7\u00f5es notaveis feita neste documento, ser\u00e3o passadas para essa aba.","title":"Changelog"},{"location":"changelog/#100-02112022","text":"","title":"1.0.0 - 02/11/2022"},{"location":"changelog/#alteracao-inicial","text":"A partir desta data, todas as altera\u00e7\u00f5es come\u00e7aram a ser mantidas e atualizadas em um local especifico, para controle de data e do que foi feito. No dia 02/11/2022 foram adicionadas: Aba de changelog . Informa\u00e7\u00f5es sobre desenvolvimento DDD . Adicionado nova aba, para futuras informa\u00e7\u00f5es sobre microservi\u00e7os.","title":"Altera\u00e7\u00e3o Inicial"},{"location":"changelog/#200-05112022","text":"","title":"2.0.0 - 05/11/2022"},{"location":"changelog/#informacoes-sobre-mvc","text":"Nesta data, foram adicionadas informa\u00e7\u00f5es sobre o padr\u00e3o de arquitetura MVC. No dia 05/11/2022 foram adicionadas: Pagina de padr\u00e3o de arquitetura MVC. Informa\u00e7\u00f5es sobre desenvolvimento MVC . Consertado indices errados na pagina de DDD .","title":"Informa\u00e7\u00f5es sobre MVC"},{"location":"changelog/#300-06112022","text":"","title":"3.0.0 - 06/11/2022"},{"location":"changelog/#informacoes-sobre-tdd","text":"Nesta data, foram adicionadas informa\u00e7\u00f5es sobre o padr\u00e3o de desenvolvimento TDD. No dia 06/11/2022 foram adicionadas: Pagina de padr\u00e3o de desenvolvimento TDD. Informa\u00e7\u00f5es sobre desenvolvimento TDD .","title":"Informa\u00e7\u00f5es sobre TDD"},{"location":"changelog/#301-06112022","text":"","title":"3.0.1 - 06/11/2022"},{"location":"changelog/#exemplos-novos-em-c-database-related","text":"Nesta data, foram adicionadas novos exemplos sobre o utiliza\u00e7\u00e3o do EF Core. No dia 06/11/2022 foram adicionadas: Mais exemplos na pagina de C# Database related, com EF Core.","title":"Exemplos novos em c# database related"},{"location":"1.0/ddd-patern/","text":"DDD ( Domain Driver Development ) O que \u00e9 DDD 1.0 Beneficios deste padr\u00e3o de codigo O DDD \u00e9 um dos artefatos que pode auxiliar, principalmente, na comunica\u00e7\u00e3o entre o grupo de desenvolvimento e o grupo de profissionais especialistas no dom\u00ednio do sistema. Com isso torna-se mais f\u00e1cil o processo de levantamento de requisitos, que \u00e9 fundamental para o planejamento do sistema. 2.0 Estrutura A API \u00e9 repartida em 3 partes, sendo elas: Dominio -> Respons\u00e1vel por representar conceitos de neg\u00f3cios, informa\u00e7\u00f5es sobre a situa\u00e7\u00e3o de neg\u00f3cios e as regras de neg\u00f3cio. O estado que reflete a situa\u00e7\u00e3o de neg\u00f3cios \u00e9 controlado e usado aqui, embora os detalhes t\u00e9cnicos de armazen\u00e1-lo sejam delegados \u00e0 infraestrutura. Essa camada \u00e9 a ess\u00eancia do software de neg\u00f3cios. Infraestrutura -> \u00c9 como todos os dados inicialmente mantidos em entidades (vindas da camada de dominio) s\u00e3o enviados, atualizados, ou mantidos em bancos de dados ou outro repositorio persistente. (utilizando algum ORM ou outro tipo de framework de acesso a dados). Aplica\u00e7\u00e3o (Apresenta\u00e7\u00e3o) -> Define os trabalhos que o software deve fazer e direciona os objetos de dom\u00ednio expressivos para resolver problemas. As tarefas pelas quais esta camada \u00e9 respons\u00e1vel s\u00e3o significativas para os neg\u00f3cios ou necess\u00e1rias para a intera\u00e7\u00e3o com as camadas do aplicativo de outros sistemas. Essa camada \u00e9 mantida fina. Ele n\u00e3o cont\u00e9m regras de neg\u00f3cio nem conhecimento, mas apenas coordena o trabalho de tarefas e delegados para colabora\u00e7\u00f5es de objetos de dom\u00ednio na pr\u00f3xima camada abaixo. Ele n\u00e3o tem um estado refletindo a situa\u00e7\u00e3o de neg\u00f3cios, mas pode ter um estado que reflita o progresso de uma tarefa para o usu\u00e1rio ou o programa. 2.1 Domain (Dom\u00ednio) -> Camada de entidades e negocio \u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Esta camada \u00e9 expressa e codificada como uma biblioteca de classes, com as entidades que capturam dados mais comportamentos. Deve ignorar totalmente detalhes relacionados a persistencia de dados. Esta camada n\u00e3o deve receber dependencias de nenhuma outra camada, \u00e9 muito importante que classes declaradas nesta camada sejam POCOs . N\u00e3o deve possuir nenhuma dependencia direta, com nenhuma camada ou suas dependencias Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ) de maneira POCO , classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros. 2.2 Infra (Infraestrutura) -> Camada de persistencia de dados Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Esta camada, implementa e referencia a camada de dominio, para ter acesso as classes que nela est\u00e3o presentes. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos, Implementa\u00e7\u00e3o dos repositories , outras implementa\u00e7\u00f5es usadas na camada de apresenta\u00e7\u00e3o, como logging , criptografia entre outros. 2.3 Presentation (Apresenta\u00e7\u00e3o) -> Camada de Apresenta\u00e7\u00e3o Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Basicamente, a \u201cl\u00f3gica de aplicativo\u201d \u00e9 onde voc\u00ea implementa todos os casos de uso que dependem de um determinado front-end. Por exemplo, a implementa\u00e7\u00e3o relacionada a um servi\u00e7o de API da Web. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"DDD"},{"location":"1.0/ddd-patern/#ddd-domain-driver-development","text":"O que \u00e9 DDD","title":"DDD (Domain Driver Development)"},{"location":"1.0/ddd-patern/#10-beneficios-deste-padrao-de-codigo","text":"O DDD \u00e9 um dos artefatos que pode auxiliar, principalmente, na comunica\u00e7\u00e3o entre o grupo de desenvolvimento e o grupo de profissionais especialistas no dom\u00ednio do sistema. Com isso torna-se mais f\u00e1cil o processo de levantamento de requisitos, que \u00e9 fundamental para o planejamento do sistema.","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/ddd-patern/#20-estrutura","text":"A API \u00e9 repartida em 3 partes, sendo elas: Dominio -> Respons\u00e1vel por representar conceitos de neg\u00f3cios, informa\u00e7\u00f5es sobre a situa\u00e7\u00e3o de neg\u00f3cios e as regras de neg\u00f3cio. O estado que reflete a situa\u00e7\u00e3o de neg\u00f3cios \u00e9 controlado e usado aqui, embora os detalhes t\u00e9cnicos de armazen\u00e1-lo sejam delegados \u00e0 infraestrutura. Essa camada \u00e9 a ess\u00eancia do software de neg\u00f3cios. Infraestrutura -> \u00c9 como todos os dados inicialmente mantidos em entidades (vindas da camada de dominio) s\u00e3o enviados, atualizados, ou mantidos em bancos de dados ou outro repositorio persistente. (utilizando algum ORM ou outro tipo de framework de acesso a dados). Aplica\u00e7\u00e3o (Apresenta\u00e7\u00e3o) -> Define os trabalhos que o software deve fazer e direciona os objetos de dom\u00ednio expressivos para resolver problemas. As tarefas pelas quais esta camada \u00e9 respons\u00e1vel s\u00e3o significativas para os neg\u00f3cios ou necess\u00e1rias para a intera\u00e7\u00e3o com as camadas do aplicativo de outros sistemas. Essa camada \u00e9 mantida fina. Ele n\u00e3o cont\u00e9m regras de neg\u00f3cio nem conhecimento, mas apenas coordena o trabalho de tarefas e delegados para colabora\u00e7\u00f5es de objetos de dom\u00ednio na pr\u00f3xima camada abaixo. Ele n\u00e3o tem um estado refletindo a situa\u00e7\u00e3o de neg\u00f3cios, mas pode ter um estado que reflita o progresso de uma tarefa para o usu\u00e1rio ou o programa.","title":"2.0 Estrutura"},{"location":"1.0/ddd-patern/#21-domain-dominio-camada-de-entidades-e-negocio","text":"\u00c9 o cora\u00e7\u00e3o do projeto e deve apresentar o neg\u00f3cio. Esta camada \u00e9 expressa e codificada como uma biblioteca de classes, com as entidades que capturam dados mais comportamentos. Deve ignorar totalmente detalhes relacionados a persistencia de dados. Esta camada n\u00e3o deve receber dependencias de nenhuma outra camada, \u00e9 muito importante que classes declaradas nesta camada sejam POCOs . N\u00e3o deve possuir nenhuma dependencia direta, com nenhuma camada ou suas dependencias Neste podemos armazenar repositories (incluindo suas interfaces), entidades ( models ) de maneira POCO , classes de servi\u00e7os, Valida\u00e7\u00f5es entre outros.","title":"2.1 Domain (Dom\u00ednio) -&gt; Camada de entidades e negocio"},{"location":"1.0/ddd-patern/#22-infra-infraestrutura-camada-de-persistencia-de-dados","text":"Cuida do suporte geral as demais implementa\u00e7\u00f5es e em geral possui uma outra camada que se comunica com todas as camadas do projeto. Esta camada, implementa e referencia a camada de dominio, para ter acesso as classes que nela est\u00e3o presentes. Neste criamos os adapters , data contexts , providers e queries , Persistencias, Mapeamentos, Implementa\u00e7\u00e3o dos repositories , outras implementa\u00e7\u00f5es usadas na camada de apresenta\u00e7\u00e3o, como logging , criptografia entre outros.","title":"2.2 Infra (Infraestrutura) -&gt; Camada de persistencia de dados"},{"location":"1.0/ddd-patern/#23-presentation-apresentacao-camada-de-apresentacao","text":"Cuida da intera\u00e7\u00e3o com que vai usar a aplica\u00e7\u00e3o. Basicamente, a \u201cl\u00f3gica de aplicativo\u201d \u00e9 onde voc\u00ea implementa todos os casos de uso que dependem de um determinado front-end. Por exemplo, a implementa\u00e7\u00e3o relacionada a um servi\u00e7o de API da Web. Neste teremos acesso \u00e1 um projeto Mobile, Web, Web API, Desktop entre outros. Podemos nele criar arquivos de configura\u00e7\u00e3o (swaggerGen, Controllers, Database-related, Middleware), Controllers em si, Middleware em si, Filtros entre outros.","title":"2.3 Presentation (Apresenta\u00e7\u00e3o) -&gt; Camada de Apresenta\u00e7\u00e3o"},{"location":"1.0/informacoes/","text":"Padr\u00e3o de estruturas 1.0 Repository Reponsavel por logica de banco de dados, sejam CRUD, ou algo relacionado. 2.0 Classe de Servi\u00e7o Logica de negocio, chama repository caso necessario. 3.0 Camadas Domain -> Cora\u00e7\u00e3o do programa, classes, variaveis, repository \u00e9 declarado aqui (sua interface tbm), services Infra -> Conex\u00e3o com banco, contexts, e integra a domain para acessar a repository Presentation -> Intera\u00e7\u00e3o do usuario.","title":"Padr\u00e3o de estruturas"},{"location":"1.0/informacoes/#padrao-de-estruturas","text":"","title":"Padr\u00e3o de estruturas"},{"location":"1.0/informacoes/#10-repository","text":"Reponsavel por logica de banco de dados, sejam CRUD, ou algo relacionado.","title":"1.0 Repository"},{"location":"1.0/informacoes/#20-classe-de-servico","text":"Logica de negocio, chama repository caso necessario.","title":"2.0 Classe de Servi\u00e7o"},{"location":"1.0/informacoes/#30-camadas","text":"Domain -> Cora\u00e7\u00e3o do programa, classes, variaveis, repository \u00e9 declarado aqui (sua interface tbm), services Infra -> Conex\u00e3o com banco, contexts, e integra a domain para acessar a repository Presentation -> Intera\u00e7\u00e3o do usuario.","title":"3.0 Camadas"},{"location":"1.0/mvc-pattern/","text":"MVC (Model View Controller) 1.0 Beneficios deste padr\u00e3o de codigo Por utilizar este padr\u00e3o de arquitetura, voc\u00ea se submete aos seguintes benef\u00edcios: - Seguran\u00e7a: A controller funciona como uma forma de filtro que consegue impedir que qualquer dado incorreto chegue at\u00e9 a Model . - Organiza\u00e7\u00e3o: Este padr\u00e3o de arquitetura, permite que qualquer um que v\u00e1 ler o c\u00f3digo tenha muito mais facilidade em entender o que foi constru\u00eddo. - Efici\u00eancia: Por conta da aplica\u00e7\u00e3o ser repartida em 3 camadas, fica mais leve e facil, permitindo que varios programadores trabalhem no mesmo projeto de forma independente. 2.0 Estrutura \u00c9 repartida em 3 partes sendo elas: Model -> Logica de negocio, entidades. View -> Apar\u00eancia. Controller -> Intermedia informa\u00e7\u00f5es entre as outras camadas. 2.1 Model Tamb\u00e9m conhecida como Business Object Model . Tem como responsabilidade gerenciar e controlar a forma como os dados se comportam, por fun\u00e7\u00f5es, logicas e regras de neg\u00f3cio estabalecidas. 2.2 View Respons\u00e1vel por apresentar as informa\u00e7\u00f5es de maneira visual para o usu\u00e1rio, neste camada devem ser aplicadas somente recursos ligados a aparencia. (Frontend) 2.3 Controller Repons\u00e1vel por intermediar requisi\u00e7\u00f5es enviadas pela View , com as repostas fornecidas pela Model , processando as informa\u00e7\u00f5es enviadas pelo usu\u00e1rio e compartilhando para as outras camadas.","title":"MVC"},{"location":"1.0/mvc-pattern/#mvc-model-view-controller","text":"","title":"MVC (Model View Controller)"},{"location":"1.0/mvc-pattern/#10-beneficios-deste-padrao-de-codigo","text":"Por utilizar este padr\u00e3o de arquitetura, voc\u00ea se submete aos seguintes benef\u00edcios: - Seguran\u00e7a: A controller funciona como uma forma de filtro que consegue impedir que qualquer dado incorreto chegue at\u00e9 a Model . - Organiza\u00e7\u00e3o: Este padr\u00e3o de arquitetura, permite que qualquer um que v\u00e1 ler o c\u00f3digo tenha muito mais facilidade em entender o que foi constru\u00eddo. - Efici\u00eancia: Por conta da aplica\u00e7\u00e3o ser repartida em 3 camadas, fica mais leve e facil, permitindo que varios programadores trabalhem no mesmo projeto de forma independente.","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/mvc-pattern/#20-estrutura","text":"\u00c9 repartida em 3 partes sendo elas: Model -> Logica de negocio, entidades. View -> Apar\u00eancia. Controller -> Intermedia informa\u00e7\u00f5es entre as outras camadas.","title":"2.0 Estrutura"},{"location":"1.0/mvc-pattern/#21-model","text":"Tamb\u00e9m conhecida como Business Object Model . Tem como responsabilidade gerenciar e controlar a forma como os dados se comportam, por fun\u00e7\u00f5es, logicas e regras de neg\u00f3cio estabalecidas.","title":"2.1 Model"},{"location":"1.0/mvc-pattern/#22-view","text":"Respons\u00e1vel por apresentar as informa\u00e7\u00f5es de maneira visual para o usu\u00e1rio, neste camada devem ser aplicadas somente recursos ligados a aparencia. (Frontend)","title":"2.2 View"},{"location":"1.0/mvc-pattern/#23-controller","text":"Repons\u00e1vel por intermediar requisi\u00e7\u00f5es enviadas pela View , com as repostas fornecidas pela Model , processando as informa\u00e7\u00f5es enviadas pelo usu\u00e1rio e compartilhando para as outras camadas.","title":"2.3 Controller"},{"location":"1.0/repository-pattern/","text":"Repository Um dos padr\u00f5es de projeto mais utilizado e conhecido no desenvolvimento de software. Esse padr\u00e3o contribui no isolamento da camada de acesso a dados (DAL) com a camada de neg\u00f3cio, conhecida como camada de dom\u00ednio. Ele permite encapsulamento da l\u00f3gica de acesso a dados, utilizando a inje\u00e7\u00e3o de dependencia e proporcionando uma vis\u00e3o mais orientada a objetos. Com esse pattern , aplicamos o principio da persistencia ignorante , ou seja nossas entidades (classes), n\u00e3o devem sofrer impactos pela forma em que s\u00e3o persistidas no banco de dados. 1.0 Beneficios deste padr\u00e3o de codigo Permitir a troca do banco de dados utilizado sem afetar o sistema como um todo. C\u00f3digo centralizado em um \u00fanico ponto, evitando duplicidade. Facilita a implementa\u00e7\u00e3o de testes unit\u00e1rios. Diminui o acoplamento entre classes. Padroniza\u00e7\u00e3o de c\u00f3digos e servi\u00e7os. 1.1 Como utilizar esse Pattern Devemos como primeiro caso, definir nossa entidade (classe) 1.2 Criar entidade namespace RepositoryPatternExemplo { public class Cliente { public string Nome { get ; private set ; } public string Sobrenome { get ; private set ; } public string Cargo { get ; private set ; } } } 1.3 Criar Interface do repositorio namespace RepositoryPatternExemplo.Interfaces { public interface IClienteRepository { Cliente Get ( int IdCliente ); Cliente GetAll ( int IdCliente ); bool Save ( Cliente cliente ); bool Update ( Cliente cliente ); bool Delete ( Cliente cliente ); } } Podendo ainda ser substituido por sua vers\u00e3o generica. public interface IEntidadeGenerica < TEntity > { TEntity Get ( int IdCliente ); TEntity GetAll ( int IdCliente ); bool Save ( TEntity cliente ); bool Update ( TEntity cliente ); bool Delete ( TEntity cliente ); } 1.3 Criar repositorio using RepositoryPatternExemplo ; using RepositoryPatternExemplo.Interfaces ; using System ; namespace RepositoryPatternExemplo.Repository { public class ClienteRepository : IClienteRepository { public bool Delete ( Cliente cliente ) { // C\u00f3digo para deletar um cliente } public Cliente Get ( int IdCliente ) { // C\u00f3digo para obter um cliente pelo Id } public Cliente GetAll ( int IdCliente ) { // C\u00f3digo para obter todos os clientes } public bool Save ( Cliente cliente ) { // C\u00f3digo para salvar um novo cliente } public bool Update ( Cliente cliente ) { // C\u00f3digo para editar um cliente } } } 1.4 Ap\u00f3s isso Agora \u00e9 so chamar a interface no seu codigo e chamar seus metodos. Para exemplos de codigos com banco em c#, pode acessar a aba de database related, nas linguagens disponiveis.","title":"Repository"},{"location":"1.0/repository-pattern/#repository","text":"Um dos padr\u00f5es de projeto mais utilizado e conhecido no desenvolvimento de software. Esse padr\u00e3o contribui no isolamento da camada de acesso a dados (DAL) com a camada de neg\u00f3cio, conhecida como camada de dom\u00ednio. Ele permite encapsulamento da l\u00f3gica de acesso a dados, utilizando a inje\u00e7\u00e3o de dependencia e proporcionando uma vis\u00e3o mais orientada a objetos. Com esse pattern , aplicamos o principio da persistencia ignorante , ou seja nossas entidades (classes), n\u00e3o devem sofrer impactos pela forma em que s\u00e3o persistidas no banco de dados.","title":"Repository"},{"location":"1.0/repository-pattern/#10-beneficios-deste-padrao-de-codigo","text":"Permitir a troca do banco de dados utilizado sem afetar o sistema como um todo. C\u00f3digo centralizado em um \u00fanico ponto, evitando duplicidade. Facilita a implementa\u00e7\u00e3o de testes unit\u00e1rios. Diminui o acoplamento entre classes. Padroniza\u00e7\u00e3o de c\u00f3digos e servi\u00e7os.","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/repository-pattern/#11-como-utilizar-esse-pattern","text":"Devemos como primeiro caso, definir nossa entidade (classe)","title":"1.1 Como utilizar esse Pattern"},{"location":"1.0/repository-pattern/#12-criar-entidade","text":"namespace RepositoryPatternExemplo { public class Cliente { public string Nome { get ; private set ; } public string Sobrenome { get ; private set ; } public string Cargo { get ; private set ; } } }","title":"1.2 Criar entidade"},{"location":"1.0/repository-pattern/#13-criar-interface-do-repositorio","text":"namespace RepositoryPatternExemplo.Interfaces { public interface IClienteRepository { Cliente Get ( int IdCliente ); Cliente GetAll ( int IdCliente ); bool Save ( Cliente cliente ); bool Update ( Cliente cliente ); bool Delete ( Cliente cliente ); } } Podendo ainda ser substituido por sua vers\u00e3o generica. public interface IEntidadeGenerica < TEntity > { TEntity Get ( int IdCliente ); TEntity GetAll ( int IdCliente ); bool Save ( TEntity cliente ); bool Update ( TEntity cliente ); bool Delete ( TEntity cliente ); }","title":"1.3 Criar Interface do repositorio"},{"location":"1.0/repository-pattern/#13-criar-repositorio","text":"using RepositoryPatternExemplo ; using RepositoryPatternExemplo.Interfaces ; using System ; namespace RepositoryPatternExemplo.Repository { public class ClienteRepository : IClienteRepository { public bool Delete ( Cliente cliente ) { // C\u00f3digo para deletar um cliente } public Cliente Get ( int IdCliente ) { // C\u00f3digo para obter um cliente pelo Id } public Cliente GetAll ( int IdCliente ) { // C\u00f3digo para obter todos os clientes } public bool Save ( Cliente cliente ) { // C\u00f3digo para salvar um novo cliente } public bool Update ( Cliente cliente ) { // C\u00f3digo para editar um cliente } } }","title":"1.3 Criar repositorio"},{"location":"1.0/repository-pattern/#14-apos-isso","text":"Agora \u00e9 so chamar a interface no seu codigo e chamar seus metodos. Para exemplos de codigos com banco em c#, pode acessar a aba de database related, nas linguagens disponiveis.","title":"1.4 Ap\u00f3s isso"},{"location":"1.0/tdd-pattern/","text":"TDD Pattern (Test Driven Development) 1.0 Beneficios deste padr\u00e3o de codigo Feedback r\u00e1pido: como estamos testando novas funcionalidades logo de cara, ja sabemos como ela se comporta antes mesma de acoplarmos ela no c\u00f3digo ja existente. C\u00f3digo mais limpo: Como estamos escrevendo c\u00f3digos simples, com intuito de passar no teste, acabamos por ser direto ao ponto. Seguran\u00e7a: Conseguimos ter controle no refactoring e corre\u00e7\u00e3o de bugs. Produtividade: J\u00e1 que estamos testando a funcionalidade diretamente, conseguimos encontrar menos bugs, e caso encontre, podem ser resolvidos de maneira rapida. 2.0 O que \u00e9? TDD \u00e9 um padr\u00e3o de desenvolvimento orientado por testes. Onde desenvolvemos nosso software baseado em testes, que s\u00e3o escritos antes mesmo da propria fun\u00e7\u00e3o ser implementada. 3.0 Como funciona? Este padr\u00e3o de desenvolvimento se baseia em pequenos ciclos de repeti\u00e7\u00f5es, que segue basicamente a seguinte sequ\u00eancia: Cria\u00e7\u00e3o de Teste para nova funcionalidade. Teste falha (pois ainda n\u00e3o existe a funcionalidade). Cria\u00e7\u00e3o e implementa\u00e7\u00e3o da funcionalidade. Teste passa. Refatora\u00e7\u00e3o de c\u00f3digo. 4.0 Por qu\u00ea refatora\u00e7\u00e3o? Basicamente quando fazemos a fun\u00e7\u00e3o baseada em um teste, nosso objetivo \u00e9 que a nova funcionalidade, seja feita com escopo de passar no teste. Mas nem sempre isso significa que ela esta adequada, ou at\u00e9 mesmo seguindo boas pr\u00e1ticas. Por conta disto, fazemos uma refatora\u00e7\u00e3o, com o intuito de ainda passar no teste, por\u00e9m ter um c\u00f3digo totalmente limpo, coeso e menos acoplado.","title":"TDD"},{"location":"1.0/tdd-pattern/#tdd-pattern-test-driven-development","text":"","title":"TDD Pattern (Test Driven Development)"},{"location":"1.0/tdd-pattern/#10-beneficios-deste-padrao-de-codigo","text":"Feedback r\u00e1pido: como estamos testando novas funcionalidades logo de cara, ja sabemos como ela se comporta antes mesma de acoplarmos ela no c\u00f3digo ja existente. C\u00f3digo mais limpo: Como estamos escrevendo c\u00f3digos simples, com intuito de passar no teste, acabamos por ser direto ao ponto. Seguran\u00e7a: Conseguimos ter controle no refactoring e corre\u00e7\u00e3o de bugs. Produtividade: J\u00e1 que estamos testando a funcionalidade diretamente, conseguimos encontrar menos bugs, e caso encontre, podem ser resolvidos de maneira rapida.","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/tdd-pattern/#20-o-que-e","text":"TDD \u00e9 um padr\u00e3o de desenvolvimento orientado por testes. Onde desenvolvemos nosso software baseado em testes, que s\u00e3o escritos antes mesmo da propria fun\u00e7\u00e3o ser implementada.","title":"2.0 O que \u00e9?"},{"location":"1.0/tdd-pattern/#30-como-funciona","text":"Este padr\u00e3o de desenvolvimento se baseia em pequenos ciclos de repeti\u00e7\u00f5es, que segue basicamente a seguinte sequ\u00eancia: Cria\u00e7\u00e3o de Teste para nova funcionalidade. Teste falha (pois ainda n\u00e3o existe a funcionalidade). Cria\u00e7\u00e3o e implementa\u00e7\u00e3o da funcionalidade. Teste passa. Refatora\u00e7\u00e3o de c\u00f3digo.","title":"3.0 Como funciona?"},{"location":"1.0/tdd-pattern/#40-por-que-refatoracao","text":"Basicamente quando fazemos a fun\u00e7\u00e3o baseada em um teste, nosso objetivo \u00e9 que a nova funcionalidade, seja feita com escopo de passar no teste. Mas nem sempre isso significa que ela esta adequada, ou at\u00e9 mesmo seguindo boas pr\u00e1ticas. Por conta disto, fazemos uma refatora\u00e7\u00e3o, com o intuito de ainda passar no teste, por\u00e9m ter um c\u00f3digo totalmente limpo, coeso e menos acoplado.","title":"4.0 Por qu\u00ea refatora\u00e7\u00e3o?"},{"location":"1.0/behavioral%20pattern/chain-of-resp-pattern/","text":"Chain of Responsability Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Chain of Resp"},{"location":"1.0/behavioral%20pattern/chain-of-resp-pattern/#chain-of-responsability-pattern","text":"","title":"Chain of Responsability Pattern"},{"location":"1.0/behavioral%20pattern/chain-of-resp-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/command-pattern/","text":"Command Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Command"},{"location":"1.0/behavioral%20pattern/command-pattern/#command-pattern","text":"","title":"Command Pattern"},{"location":"1.0/behavioral%20pattern/command-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/interpreter-pattern/","text":"Interpreter Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Interpreter"},{"location":"1.0/behavioral%20pattern/interpreter-pattern/#interpreter-pattern","text":"","title":"Interpreter Pattern"},{"location":"1.0/behavioral%20pattern/interpreter-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/iterator-pattern/","text":"Iterator Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Iterator"},{"location":"1.0/behavioral%20pattern/iterator-pattern/#iterator-pattern","text":"","title":"Iterator Pattern"},{"location":"1.0/behavioral%20pattern/iterator-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/mediator-pattern/","text":"Mediator Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Mediator"},{"location":"1.0/behavioral%20pattern/mediator-pattern/#mediator-pattern","text":"","title":"Mediator Pattern"},{"location":"1.0/behavioral%20pattern/mediator-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/memento-pattern/","text":"Memento Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Memento"},{"location":"1.0/behavioral%20pattern/memento-pattern/#memento-pattern","text":"","title":"Memento Pattern"},{"location":"1.0/behavioral%20pattern/memento-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/observer-pattern/","text":"Observer Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Observer"},{"location":"1.0/behavioral%20pattern/observer-pattern/#observer-pattern","text":"","title":"Observer Pattern"},{"location":"1.0/behavioral%20pattern/observer-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/state-pattern/","text":"State Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"State"},{"location":"1.0/behavioral%20pattern/state-pattern/#state-pattern","text":"","title":"State Pattern"},{"location":"1.0/behavioral%20pattern/state-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/strategy-pattern/","text":"Strategy Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Strategy"},{"location":"1.0/behavioral%20pattern/strategy-pattern/#strategy-pattern","text":"","title":"Strategy Pattern"},{"location":"1.0/behavioral%20pattern/strategy-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/template-method-pattern/","text":"Template Method Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Template Method"},{"location":"1.0/behavioral%20pattern/template-method-pattern/#template-method-pattern","text":"","title":"Template Method Pattern"},{"location":"1.0/behavioral%20pattern/template-method-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/behavioral%20pattern/visitor-pattern/","text":"Visitor Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Visitor"},{"location":"1.0/behavioral%20pattern/visitor-pattern/#visitor-pattern","text":"","title":"Visitor Pattern"},{"location":"1.0/behavioral%20pattern/visitor-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/abstract-pattern/","text":"Abstract Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Abstract Factory"},{"location":"1.0/creational%20pattern/abstract-pattern/#abstract-pattern","text":"","title":"Abstract Pattern"},{"location":"1.0/creational%20pattern/abstract-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/builder-pattern/","text":"Builder Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Builder"},{"location":"1.0/creational%20pattern/builder-pattern/#builder-pattern","text":"","title":"Builder Pattern"},{"location":"1.0/creational%20pattern/builder-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/factory-method-pattern/","text":"Factory Method Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Factory Method"},{"location":"1.0/creational%20pattern/factory-method-pattern/#factory-method-pattern","text":"","title":"Factory Method Pattern"},{"location":"1.0/creational%20pattern/factory-method-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/prototype-pattern/","text":"Prototype Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Prototype"},{"location":"1.0/creational%20pattern/prototype-pattern/#prototype-pattern","text":"","title":"Prototype Pattern"},{"location":"1.0/creational%20pattern/prototype-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/creational%20pattern/singleton-pattern/","text":"Singleton Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Singleton"},{"location":"1.0/creational%20pattern/singleton-pattern/#singleton-pattern","text":"","title":"Singleton Pattern"},{"location":"1.0/creational%20pattern/singleton-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/adapter-pattern/","text":"Adapter Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Adapter"},{"location":"1.0/structural%20pattern/adapter-pattern/#adapter-pattern","text":"","title":"Adapter Pattern"},{"location":"1.0/structural%20pattern/adapter-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/bridge-pattern/","text":"Bridge Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Bridge"},{"location":"1.0/structural%20pattern/bridge-pattern/#bridge-pattern","text":"","title":"Bridge Pattern"},{"location":"1.0/structural%20pattern/bridge-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/composite-pattern/","text":"Composite Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Composite"},{"location":"1.0/structural%20pattern/composite-pattern/#composite-pattern","text":"","title":"Composite Pattern"},{"location":"1.0/structural%20pattern/composite-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/decorator-pattern/","text":"Decorator Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Decorator"},{"location":"1.0/structural%20pattern/decorator-pattern/#decorator-pattern","text":"","title":"Decorator Pattern"},{"location":"1.0/structural%20pattern/decorator-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/facade-pattern/","text":"Facade Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Facade"},{"location":"1.0/structural%20pattern/facade-pattern/#facade-pattern","text":"","title":"Facade Pattern"},{"location":"1.0/structural%20pattern/facade-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/flyweight-pattern/","text":"Fly Weight Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Flyweight"},{"location":"1.0/structural%20pattern/flyweight-pattern/#fly-weight-pattern","text":"","title":"Fly Weight Pattern"},{"location":"1.0/structural%20pattern/flyweight-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"1.0/structural%20pattern/proxy-pattern/","text":"Proxy Pattern 1.0 Beneficios deste padr\u00e3o de codigo","title":"Proxy"},{"location":"1.0/structural%20pattern/proxy-pattern/#proxy-pattern","text":"","title":"Proxy Pattern"},{"location":"1.0/structural%20pattern/proxy-pattern/#10-beneficios-deste-padrao-de-codigo","text":"","title":"1.0 Beneficios deste padr\u00e3o de codigo"},{"location":"C%23/csharp-database-related/","text":"C# - Database related content 1.0 Topicos a serem abordados nesta pagina Aqui encontrar\u00e1 diversos metodos e maneiras de se usar para conectar-se ao banco de dados na linguagem C# 1.1 Via Console Application Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Console Application 1.1.1 Requerimentos Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Microsoft.Data.SqlClient ou System.Data.SqlClient Referencia a uma SqlConnection, que nos exemplos a seguir, usaremos o nome de _connection. Estaremos acessando uma tabela fictica chamada funcionarios. 1.1.2 Abrir conex\u00e3o Primeira coisa que devemos fazer antes de processeguir \u00e9 abrir a conex\u00e3o, para assim podermos acessar e manipular nosso banco de dados. Estamos alocando o c\u00f3digo a seguir dentro de um try catch para podermos isolar possiveis erros. try { Console . WriteLine ( \"Tentando Abrir conex\u00e3o com banco..\" ); if ( _connection . State == System . Data . ConnectionState . Closed ) { _connection . Open (); } Console . WriteLine ( \"Conex\u00e3o Aberta!\" ); Console . Clear (); } catch ( SqlException e ) { Console . WriteLine ( $\"Erro: {e.Message}\" ); Console . WriteLine ( \"Pressione qualquer tecla para continuar!\" ); Console . ReadKey (); } 1.1.3 SelectAll No c\u00f3digo a seguir, implementaremos um selectAll (trazer todos os dados, sem especifica\u00e7\u00e3o) var strBuilder = new StringBuilder (); strBuilder . Append ( \"select * from Funcionario\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); } 1.1.4 Select No c\u00f3digo a seguir, implementaremos um select comum, utilizando uma fonte de pesquisa. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"select * from Funcionario where nome like N'{nome}%';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); } 1.1.5 Insert No c\u00f3digo a seguir, implementaremos um insert dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( \"insert into Funcionario (nome, cpf, endereco, telefone, cargo) values \" ); strBuilder . Append ( $\"(N'{funcionario.nome}',N'{funcionario.cpf}',N'{funcionario.endereco}',N'{funcionario.telefone}',N'{funcionario.cargo}')\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario {funcionario.nome} Inserido!!\" ); } 1.1.6 Update No c\u00f3digo a seguir, implementaremos um update dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"update Funcionario set nome = N'{funcionario.nome}' , cpf = N'{funcionario.cpf}', endereco = N'{funcionario.endereco}', telefone = N'{funcionario.telefone}', cargo = N'{funcionario.cargo}' where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario Antigo nome: {nome}\\nFuncionario Novo nome: {funcionario.nome}\" ); } 1.1.7 Delete No c\u00f3digo a seguir, implementaremos um delete dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"delete from Funcionario where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { Console . WriteLine ( $\"Funcionario: {nome} foi deletado!!\" ); Console . WriteLine ( \"Deseja reverter?\" ); var resposta = Console . ReadLine (); if ( resposta . ToLower () == \"sim\" || resposta . ToLower () == \"s\" ) { Console . WriteLine ( $\"Funcionario: {nome} foi recuperado!!\" ); } else { command . ExecuteNonQuery (); } } 1.2 Via Entity Framework Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Entity Framework Core. Este codigo esta disponivel em: EntityFrameworkKnowleadge , e futuramente ser\u00e3o adicionados mais exemplos com entity, em outros tipos de aplica\u00e7\u00e3o. Caso utilize o codigo acima, lembre-se de alterar a connectionString e criar novas migrations. OBS: Em casos de retorno de muitos dados, podemos utilizar a fun\u00e7\u00e3o de no tracking do EF Core, para poupar o framework de ter que fazer rastreamento de todas as querys, podemos desabilitar essa fun\u00e7\u00e3o, e com isso aumentar performance do processo. Ex: var no tracking = await _context . TABELA . AsNoTracking (). FirstOrDefaultAsync (); //poderia utilizar toListAsync tbm ou qlqr outro metodo de finalizar. 1.2.1 Requerimentos Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Entity Framework Core for SQL Server. 1.2.2 Abrir conex\u00e3o Por padr\u00e3o toda conex\u00e3o feita com Entity Framework Core, se baseia em um arquivo context, onde la teremos variaveis DbSet seguidas de um tipo (classe), que seriam sua referencia a alguma classe criada que representa uma tabela do banco, uma ja existente ou a ser criada. namespace EntityFrameworkKnowleadge.Data { public class FootballLeagueDbContext : DbContext { protected override void OnConfiguring ( DbContextOptionsBuilder optionsBuilder ) { optionsBuilder . UseSqlServer ( @\"Data Source=LAPTOP-J71CJ04F\\SQLEXPRESS;Initial Catalog=EntityTesteBD;Integrated Security=True\" ) //Ta assim para testes, pessima pratica /*.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Command.Name}, LogLevel.Information) .EnableSensitiveDataLogging()*/ ; } public DbSet < Team > Teams { get ; set ; } public DbSet < League > Leagues { get ; set ; } } } Aqui, como o exemplo de conex\u00e3o est\u00e1 sendo via Console Application , passamos a connectionString diretamente no c\u00f3digo, porem em um exemplo real, ela n\u00e3o deveria estar ali, por medidas de seguran\u00e7a. Em uma API, ela estaria localizada no userSecrets, ou at\u00e9 mesmo appsettings.json. Para darmos continuidade e podermos criar nossos DbSet , devemos criar as classes referentes ao mesmos. namespace EntityFrameworkKnowleadge.Domain { public class Team { public int Id { get ; set ; } public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } public void PrintData ( League league ) { Console . WriteLine ( $\"\\nTime com Indentifica\u00e7\u00e3o: {Id}\" + $\"\\n\\t Nome: {Name}\" + $\"\\n\\t Pertence a liga: {league.Name}\" ); } } Veja que aqui, estamos passando o nome das colunas com conota\u00e7\u00e3o de sintaxe para C#, porem caso o banco n\u00e3o esteja dessa forma, podemos manter a sintaxe de C#, porem passar uma Data Annotation para mostrarmos ao Entity qual o nome real da coluna no SQL. O Entity Framework por padr\u00e3o, consegue identificar chaves primarias e estrangeiras, atrav\u00e9s do nome da variavel conter o nome Id, em alguma parte de seu nome, por\u00e9m quando este n\u00e3o \u00e9 o caso, podemos passar Data Annotation para especificarmos qual a chave primaria da tabela. public class Team { [Key] [Column(\"Nome Real da coluna\")] public int Id { get ; set ; } [Column(\"Nome Real da coluna\")] public string Name { get ; set ; } [Column(\"Nome Real da coluna\")] public int LeagueId { get ; set ; } public virtual League League { get ; set ; } // <---- Esta variavel \u00e9 utilizada para dizermos ao entity que a variavel acima \u00e9 uma referencia a uma chave estrangeira. } 1.2.3 SelectAll No c\u00f3digo a seguir, implementaremos um selectAll (trazer todos os dados, sem especifica\u00e7\u00e3o) public async void GeneralTeamSearch () { var teams = await _context . Teams . ToListAsync (); foreach ( var team in teams ) { var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == team . Id ); team . PrintData ( league ); } } 1.2.4 Select No c\u00f3digo a seguir, implementaremos um select comum, utilizando uma fonte de pesquisa. public async Task < Team > NameTeamSearch ( string name ) { var team = await _context . Teams . FirstOrDefaultAsync ( team => team . Name == name ); var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == team . LeagueId ); team . PrintData ( league ); return team ; } 1.2.5 Insert No c\u00f3digo a seguir, implementaremos um insert dentro da tabela de times. public async void insertNewTeam ( Team team ) { await _context . Teams . AddAsync ( team ); Console . WriteLine ( $\"Inserindo novo time de nome: {team.Name}\\nId do Time: {team.LeagueId}\" ); } 1.2.6 Update No c\u00f3digo a seguir, implementaremos um update dentro da tabela de times. public async void UpdateTeam ( Team teamReference ) { Console . WriteLine ( \"Insira o novo nome deste time\" ); var newName = Console . ReadLine (); Console . WriteLine ( \"Insira o Id da liga que este time pertencer\u00e1\" ); var leagueID = int . Parse ( Console . ReadLine ()); var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == teamReference . LeagueId ); Console . WriteLine ( $\"Valores antigos desse time:\" ); teamReference . PrintData ( league ); teamReference . Name = newName ; teamReference . LeagueId = leagueID ; league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == teamReference . LeagueId ); Console . WriteLine ( $\"Novos valores para esse time:\" ); teamReference . PrintData ( league ); _context . Teams . Update ( teamReference ); } 1.2.7 Delete No c\u00f3digo a seguir, implementaremos um delete dentro da tabela de times. public async void DeleteTeam ( Team teamReference ) { var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == teamReference . LeagueId ); Console . WriteLine ( $\"Valores antigos desse time:\" ); teamReference . PrintData ( league ); Console . WriteLine ( \"Deletando do banco\" ); _context . Teams . Remove ( teamReference ); } 1.2.8 Rela\u00e7\u00f5es 1.2.8.1 Rela\u00e7\u00f5es 1 para muitos Por padr\u00e3o o EF Core, segue uma nomeclatura para rela\u00e7\u00f5es entre tabelas, por exemplo automaticamente por denominar uma variavel (em uma classe) de Id, ele ja consegue reconhecer que se trata de uma chave primaria, assim como tambem o nome de alguma tabela seguida de Id (para chaves estrangeiras), por boas praticas quando vamos montar uma rela\u00e7\u00e3o de chave estrangeira, referenciamos a tabela com um modificador virtual, exemplo abaixo. 1 para muitos: public class Team { public int Id { get ; set ; } public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } } Muitos para 1: public class League { public int Id { get ; set ; } public string Name { get ; set ; } public List < Team > Teams { get ; set ; } } 1.2.8.2 Rela\u00e7\u00f5es muitos para muitos Em casos onde uma tabela faz referencia de muitos dados, de uma mesma tabela, referenciamos a mesma como uma rela\u00e7\u00e3o de muitas para muitas, segue o exemplo: public class Match : BaseDomainObject { public int HomeTeamId { get ; set ; } public virtual Team HomeTeam { get ; set ; } public int AwayTeamId { get ; set ; } public virtual Team AwayTeam { get ; set ; } public DateTime Date { get ; set ; } } Nesta classe, ela referencia a varios times, de duas maneiras distintas, sendo eles jogos que o time era o da casa, e jogos que eles eram convidados. Por conta desta altera\u00e7\u00e3o na rela\u00e7\u00e3o das tabelas, foram modificadas as classes anteriores, e agora est\u00e3o: public class Team : BaseDomainObject { public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } public virtual List < Match > HomeMatches { get ; set ; } public virtual List < Match > AwayMatches { get ; set ; } } public class League : BaseDomainObject { public string Name { get ; set ; } public List < Team > Teams { get ; set ; } } Ambas as classes de Times e Ligas, agora herdam de uma classe de objetoBasico, que tem intuito de possuir todos os campos padr\u00e3o das tabelas, como por exemplo Id 1.2.8.3 Rela\u00e7\u00f5es 1 para 1 Para exemplificar a rela\u00e7\u00e3o de um para um, iremos criar um exemplo, onde uma classe de Treinador (Coach), ser\u00e1 criada, onde um Time possu\u00ed um Treinador, e um Treinador treina somente um Time. Codigo da classe do Treinador: public class Coach : BaseDomainObject { public string Name { get ; set ; } public int? TeamId { get ; set ; } public virtual Team Team { get ; set ; } } E por consequencia, devemos referenciar esse treinador na classe de Times: public class Team : BaseDomainObject { public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } public virtual Coach Coach { get ; set ; } public virtual List < Match > HomeMatches { get ; set ; } public virtual List < Match > AwayMatches { get ; set ; } } E tambem devemos referenciar essa nova tabela em nosso DbContext, para quando rodarmos a migration, essa tabela e suas rela\u00e7\u00f5es serem alteradas de maneira correta. public DbSet < Coach > Coaches { get ; set ; } 1.2.9 Procedures A ser add 1.2.10 Raw SQL Podemos mesmo utilizando EF Core , fazer uso de queries passadas manualmente, segue exemplo: Caso sabemos o tipo que ser\u00e1 retornado, e queremos exatamente , como est\u00e1 na model: public async Task < List < League >> SearchLeagueByNameRawSql ( string name ) { var league = await _context . Leagues . FromSqlRaw ( $\"select * from league where name = '{name}'\" ). ToListAsync (); /* Maneira incorreta, pois desta forma estamos tirando a parametriza\u00e7\u00e3o, e ficamos suscet\u00edveis a sql injections */ var league2 = await _context . Leagues . FromSqlRaw ( \"select * from league where name = {0}\" , name ). ToListAsync (); /* Maneira correta, pois desta forma estamos inserindo a parametriza\u00e7\u00e3o*/ var league3 = await _context . Leagues . FromSqlInterpolated ( $\"select * from league where name = {name}\" ). ToListAsync (); /* Outra forma de utilizarmos query SQL, com entity framework, desta forma ele automaticamente parametriza os valores para n\u00f3s*/ return league ; } No exemplo acima fizemos uso das fun\u00e7\u00f5es SqlRaw e SqlInterpolated , suas diferen\u00e7as s\u00e3o, que utilizando a primeira forma, devemos passar a parametriza\u00e7\u00e3o, nos mesmos, afim de evitar possiveis ataques de Sql injection , j\u00e1 a segunda op\u00e7\u00e3o, ja faz essa trabalho para n\u00f3s. Caso sabemos o tipo que ser\u00e1 retornado, por\u00e9m queremos menos colunas, ou at\u00e9 mesmo nem sabemos o que ser\u00e1 retornado (sem ter uma model feita para ele): 1.2.11 Manipulando banco A ser add 1.2.12 Eager Loading Quando necessitamos retornar dados, que envolvem multiplas tabelas (joins), precisamos fazer o Eager Loading , basicamente joins , onde o EF core consegue fazer automaticamente, somente incluindo o .Include(lambda expression), o Include deve ser posicionado antes de qualquer comando de retorno. Ex: Retornar informa\u00e7\u00e3o de qual liga pertence tal time: Sem Eager Loading public async void GeneralTeamSearch () { var teams = await _context . Teams . ToListAsync (); foreach ( var team in teams ) { var league = await _context . Leagues . Where ( league => league . Id == team . LeagueId ). FirstOrDefaultAsync (); team . PrintData ( league ); } } Com Eager Loading public async void GeneralTeamSearch () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . League ). ToListAsync (); foreach ( var team in teams ) { team . PrintData (); } } Eager Loading com multiplas referencias ( Gran Children related record ), \u00e9 reservado pela palavra Then Include . public async void GetTeamsWithMatchesAndOpponents () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . AwayMatches ). ThenInclude ( teamProperty => teamProperty . HomeTeam ). ToListAsync (); foreach ( var team in teams ) { team . PrintData (); // Visto que necessitamos atualizar o metodo PrintData para retornar as novas informa\u00e7\u00f5es destes joins } } Tambem podemos utilizar diversos Includes: public async void GetTeamsWithMatchesAndOpponents () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . AwayMatches ). ThenInclude ( teamProperty => teamProperty . HomeTeam ) . Include ( teamProperty => teamProperty . HomeMatches ). ThenInclude ( teamProperty => teamProperty . AwayTeam ). ToListAsync (); foreach ( var team in teams ) { team . PrintData (); // Visto que necessitamos atualizar o metodo PrintData para retornar as novas informa\u00e7\u00f5es destes joins } } Exemplo Anterior retornando treinadores: public async void GetTeamsWithMatchesAndOpponents () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . AwayMatches ). ThenInclude ( teamProperty => teamProperty . HomeTeam ). ThenInclude ( teamProperty => teamProperty . Coach ) . Include ( teamProperty => teamProperty . HomeMatches ). ThenInclude ( teamProperty => teamProperty . AwayTeam ). ThenInclude ( teamProperty => teamProperty . Coach ) . ToListAsync (); foreach ( var team in teams ) { team . PrintData (); // Visto que necessitamos atualizar o metodo PrintData para retornar as novas informa\u00e7\u00f5es destes joins } } 1.2.13 Database Transaction Durante o processo de desenvolvimento, podemos encontrar casos, onde necessitamos fazer varias coisas ao mesmo tempo, at\u00e9 mesmo, salvar uma entidade para chamar-mos a mesma logo abaixo na mesma fun\u00e7\u00e3o, por quest\u00e3o de dependencia. Para estes casos, podemos criar uma Transaction, onde dizemos para o banco de dados, fa\u00e7a isto, caso falhe n\u00e3o suba, segue o exemplo: public async Task AddNewLeague () { try { var transaction = _context . Database . BeginTransaction (); // <- Isto \u00e9 como criamos a transaction var league = new League ( parametros ); await _context . AddAsync ( league ); await _context . SaveChangesAsync ( league ); await AddTeamsWithLeague ( league ); // <- Esta fun\u00e7\u00e3o depende que a liga exista, por isto criamos e salvamos a mesma antes. await _context . SaveChangesAsync (); // <- Supor que aqui falhe, teriamos sem a transaction, criado uma liga, porem a fun\u00e7\u00e3o acima poderia ter falhado por alguma raz\u00e3o. Ou at\u00e9 mesmo se n\u00e3o tivessemos salvado a liga, ela teria falhado por conta que a liga que passamos no parametro, n\u00e3o existe. transaction . Commit (); // <- Caso nenhum erro ocorra, ai sim salvamos no banco de dados. } catch ( exepction ) { transaction . Rollback (); // <- Cancela as altera\u00e7\u00f5es } } Ou caso queremos salvar um snapshot de algo que fizemos, e outra parte do codigo falhou: public async Task AddNewLeague () { try { var transaction = _context . Database . BeginTransaction (); // <- Isto \u00e9 como criamos a transaction var league = new League ( parametros ); await _context . AddAsync ( league ); await _context . SaveChangesAsync ( league ); await transaction . CreateSavepointAsync ( \"Nome do Savepoint\" ); await AddTeamsWithLeague ( league ); // <- Esta fun\u00e7\u00e3o depende que a liga exista, por isto criamos e salvamos a mesma antes. await _context . SaveChangesAsync (); // <- Supor que aqui falhe, teriamos sem a transaction, criado uma liga, porem a fun\u00e7\u00e3o acima poderia ter falhado por alguma raz\u00e3o. Ou at\u00e9 mesmo se n\u00e3o tivessemos salvado a liga, ela teria falhado por conta que a liga que passamos no parametro, n\u00e3o existe. transaction . Commit (); // <- Caso nenhum erro ocorra, ai sim salvamos no banco de dados. } catch ( exepction ) { transaction . RollbackToSavepointAsync ( \"Nome do Savepoint\" ); // <- Retorna o estado do banco de dados no momento que salvamos o savepoint } } 1.3 Via Dapper Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Dapper. 1.3.1 Requerimentos Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Dapper.","title":"Database-related"},{"location":"C%23/csharp-database-related/#c-database-related-content","text":"","title":"C# - Database related content"},{"location":"C%23/csharp-database-related/#10-topicos-a-serem-abordados-nesta-pagina","text":"Aqui encontrar\u00e1 diversos metodos e maneiras de se usar para conectar-se ao banco de dados na linguagem C#","title":"1.0 Topicos a serem abordados nesta pagina"},{"location":"C%23/csharp-database-related/#11-via-console-application","text":"Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Console Application","title":"1.1 Via Console Application"},{"location":"C%23/csharp-database-related/#111-requerimentos","text":"Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Microsoft.Data.SqlClient ou System.Data.SqlClient Referencia a uma SqlConnection, que nos exemplos a seguir, usaremos o nome de _connection. Estaremos acessando uma tabela fictica chamada funcionarios.","title":"1.1.1 Requerimentos"},{"location":"C%23/csharp-database-related/#112-abrir-conexao","text":"Primeira coisa que devemos fazer antes de processeguir \u00e9 abrir a conex\u00e3o, para assim podermos acessar e manipular nosso banco de dados. Estamos alocando o c\u00f3digo a seguir dentro de um try catch para podermos isolar possiveis erros. try { Console . WriteLine ( \"Tentando Abrir conex\u00e3o com banco..\" ); if ( _connection . State == System . Data . ConnectionState . Closed ) { _connection . Open (); } Console . WriteLine ( \"Conex\u00e3o Aberta!\" ); Console . Clear (); } catch ( SqlException e ) { Console . WriteLine ( $\"Erro: {e.Message}\" ); Console . WriteLine ( \"Pressione qualquer tecla para continuar!\" ); Console . ReadKey (); }","title":"1.1.2 Abrir conex\u00e3o"},{"location":"C%23/csharp-database-related/#113-selectall","text":"No c\u00f3digo a seguir, implementaremos um selectAll (trazer todos os dados, sem especifica\u00e7\u00e3o) var strBuilder = new StringBuilder (); strBuilder . Append ( \"select * from Funcionario\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); }","title":"1.1.3 SelectAll"},{"location":"C%23/csharp-database-related/#114-select","text":"No c\u00f3digo a seguir, implementaremos um select comum, utilizando uma fonte de pesquisa. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"select * from Funcionario where nome like N'{nome}%';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { reader = command . ExecuteReader (); while ( reader . Read ()) { Console . WriteLine ( $\"\\nNome: {reader[\" nome \"]}\\nCPF: {reader[\" cpf \"]}\\nEndere\u00e7o: {reader[\" endereco \"]}\\nTelefone: {reader[\" telefone \"]}\\nCargo: {reader[\" cargo \"]}\" ); } reader . Close (); }","title":"1.1.4 Select"},{"location":"C%23/csharp-database-related/#115-insert","text":"No c\u00f3digo a seguir, implementaremos um insert dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( \"insert into Funcionario (nome, cpf, endereco, telefone, cargo) values \" ); strBuilder . Append ( $\"(N'{funcionario.nome}',N'{funcionario.cpf}',N'{funcionario.endereco}',N'{funcionario.telefone}',N'{funcionario.cargo}')\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario {funcionario.nome} Inserido!!\" ); }","title":"1.1.5 Insert"},{"location":"C%23/csharp-database-related/#116-update","text":"No c\u00f3digo a seguir, implementaremos um update dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"update Funcionario set nome = N'{funcionario.nome}' , cpf = N'{funcionario.cpf}', endereco = N'{funcionario.endereco}', telefone = N'{funcionario.telefone}', cargo = N'{funcionario.cargo}' where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { command . ExecuteNonQuery (); Console . WriteLine ( $\"Funcionario Antigo nome: {nome}\\nFuncionario Novo nome: {funcionario.nome}\" ); }","title":"1.1.6 Update"},{"location":"C%23/csharp-database-related/#117-delete","text":"No c\u00f3digo a seguir, implementaremos um delete dentro da tabela de funcionarios. var strBuilder = new StringBuilder (); strBuilder . Append ( $\"delete from Funcionario where nome= N'{nome}';\" ); using ( SqlCommand command = new SqlCommand ( strBuilder . ToString (), _connection )) { Console . WriteLine ( $\"Funcionario: {nome} foi deletado!!\" ); Console . WriteLine ( \"Deseja reverter?\" ); var resposta = Console . ReadLine (); if ( resposta . ToLower () == \"sim\" || resposta . ToLower () == \"s\" ) { Console . WriteLine ( $\"Funcionario: {nome} foi recuperado!!\" ); } else { command . ExecuteNonQuery (); } }","title":"1.1.7 Delete"},{"location":"C%23/csharp-database-related/#12-via-entity-framework","text":"Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Entity Framework Core. Este codigo esta disponivel em: EntityFrameworkKnowleadge , e futuramente ser\u00e3o adicionados mais exemplos com entity, em outros tipos de aplica\u00e7\u00e3o. Caso utilize o codigo acima, lembre-se de alterar a connectionString e criar novas migrations. OBS: Em casos de retorno de muitos dados, podemos utilizar a fun\u00e7\u00e3o de no tracking do EF Core, para poupar o framework de ter que fazer rastreamento de todas as querys, podemos desabilitar essa fun\u00e7\u00e3o, e com isso aumentar performance do processo. Ex: var no tracking = await _context . TABELA . AsNoTracking (). FirstOrDefaultAsync (); //poderia utilizar toListAsync tbm ou qlqr outro metodo de finalizar.","title":"1.2 Via Entity Framework"},{"location":"C%23/csharp-database-related/#121-requerimentos","text":"Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Entity Framework Core for SQL Server.","title":"1.2.1 Requerimentos"},{"location":"C%23/csharp-database-related/#122-abrir-conexao","text":"Por padr\u00e3o toda conex\u00e3o feita com Entity Framework Core, se baseia em um arquivo context, onde la teremos variaveis DbSet seguidas de um tipo (classe), que seriam sua referencia a alguma classe criada que representa uma tabela do banco, uma ja existente ou a ser criada. namespace EntityFrameworkKnowleadge.Data { public class FootballLeagueDbContext : DbContext { protected override void OnConfiguring ( DbContextOptionsBuilder optionsBuilder ) { optionsBuilder . UseSqlServer ( @\"Data Source=LAPTOP-J71CJ04F\\SQLEXPRESS;Initial Catalog=EntityTesteBD;Integrated Security=True\" ) //Ta assim para testes, pessima pratica /*.LogTo(Console.WriteLine, new[] { DbLoggerCategory.Database.Command.Name}, LogLevel.Information) .EnableSensitiveDataLogging()*/ ; } public DbSet < Team > Teams { get ; set ; } public DbSet < League > Leagues { get ; set ; } } } Aqui, como o exemplo de conex\u00e3o est\u00e1 sendo via Console Application , passamos a connectionString diretamente no c\u00f3digo, porem em um exemplo real, ela n\u00e3o deveria estar ali, por medidas de seguran\u00e7a. Em uma API, ela estaria localizada no userSecrets, ou at\u00e9 mesmo appsettings.json. Para darmos continuidade e podermos criar nossos DbSet , devemos criar as classes referentes ao mesmos. namespace EntityFrameworkKnowleadge.Domain { public class Team { public int Id { get ; set ; } public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } public void PrintData ( League league ) { Console . WriteLine ( $\"\\nTime com Indentifica\u00e7\u00e3o: {Id}\" + $\"\\n\\t Nome: {Name}\" + $\"\\n\\t Pertence a liga: {league.Name}\" ); } } Veja que aqui, estamos passando o nome das colunas com conota\u00e7\u00e3o de sintaxe para C#, porem caso o banco n\u00e3o esteja dessa forma, podemos manter a sintaxe de C#, porem passar uma Data Annotation para mostrarmos ao Entity qual o nome real da coluna no SQL. O Entity Framework por padr\u00e3o, consegue identificar chaves primarias e estrangeiras, atrav\u00e9s do nome da variavel conter o nome Id, em alguma parte de seu nome, por\u00e9m quando este n\u00e3o \u00e9 o caso, podemos passar Data Annotation para especificarmos qual a chave primaria da tabela. public class Team { [Key] [Column(\"Nome Real da coluna\")] public int Id { get ; set ; } [Column(\"Nome Real da coluna\")] public string Name { get ; set ; } [Column(\"Nome Real da coluna\")] public int LeagueId { get ; set ; } public virtual League League { get ; set ; } // <---- Esta variavel \u00e9 utilizada para dizermos ao entity que a variavel acima \u00e9 uma referencia a uma chave estrangeira. }","title":"1.2.2 Abrir conex\u00e3o"},{"location":"C%23/csharp-database-related/#123-selectall","text":"No c\u00f3digo a seguir, implementaremos um selectAll (trazer todos os dados, sem especifica\u00e7\u00e3o) public async void GeneralTeamSearch () { var teams = await _context . Teams . ToListAsync (); foreach ( var team in teams ) { var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == team . Id ); team . PrintData ( league ); } }","title":"1.2.3 SelectAll"},{"location":"C%23/csharp-database-related/#124-select","text":"No c\u00f3digo a seguir, implementaremos um select comum, utilizando uma fonte de pesquisa. public async Task < Team > NameTeamSearch ( string name ) { var team = await _context . Teams . FirstOrDefaultAsync ( team => team . Name == name ); var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == team . LeagueId ); team . PrintData ( league ); return team ; }","title":"1.2.4 Select"},{"location":"C%23/csharp-database-related/#125-insert","text":"No c\u00f3digo a seguir, implementaremos um insert dentro da tabela de times. public async void insertNewTeam ( Team team ) { await _context . Teams . AddAsync ( team ); Console . WriteLine ( $\"Inserindo novo time de nome: {team.Name}\\nId do Time: {team.LeagueId}\" ); }","title":"1.2.5 Insert"},{"location":"C%23/csharp-database-related/#126-update","text":"No c\u00f3digo a seguir, implementaremos um update dentro da tabela de times. public async void UpdateTeam ( Team teamReference ) { Console . WriteLine ( \"Insira o novo nome deste time\" ); var newName = Console . ReadLine (); Console . WriteLine ( \"Insira o Id da liga que este time pertencer\u00e1\" ); var leagueID = int . Parse ( Console . ReadLine ()); var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == teamReference . LeagueId ); Console . WriteLine ( $\"Valores antigos desse time:\" ); teamReference . PrintData ( league ); teamReference . Name = newName ; teamReference . LeagueId = leagueID ; league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == teamReference . LeagueId ); Console . WriteLine ( $\"Novos valores para esse time:\" ); teamReference . PrintData ( league ); _context . Teams . Update ( teamReference ); }","title":"1.2.6 Update"},{"location":"C%23/csharp-database-related/#127-delete","text":"No c\u00f3digo a seguir, implementaremos um delete dentro da tabela de times. public async void DeleteTeam ( Team teamReference ) { var league = await _context . Leagues . FirstOrDefaultAsync ( league => league . Id == teamReference . LeagueId ); Console . WriteLine ( $\"Valores antigos desse time:\" ); teamReference . PrintData ( league ); Console . WriteLine ( \"Deletando do banco\" ); _context . Teams . Remove ( teamReference ); }","title":"1.2.7 Delete"},{"location":"C%23/csharp-database-related/#128-relacoes","text":"","title":"1.2.8 Rela\u00e7\u00f5es"},{"location":"C%23/csharp-database-related/#1281-relacoes-1-para-muitos","text":"Por padr\u00e3o o EF Core, segue uma nomeclatura para rela\u00e7\u00f5es entre tabelas, por exemplo automaticamente por denominar uma variavel (em uma classe) de Id, ele ja consegue reconhecer que se trata de uma chave primaria, assim como tambem o nome de alguma tabela seguida de Id (para chaves estrangeiras), por boas praticas quando vamos montar uma rela\u00e7\u00e3o de chave estrangeira, referenciamos a tabela com um modificador virtual, exemplo abaixo. 1 para muitos: public class Team { public int Id { get ; set ; } public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } } Muitos para 1: public class League { public int Id { get ; set ; } public string Name { get ; set ; } public List < Team > Teams { get ; set ; } }","title":"1.2.8.1 Rela\u00e7\u00f5es 1 para muitos"},{"location":"C%23/csharp-database-related/#1282-relacoes-muitos-para-muitos","text":"Em casos onde uma tabela faz referencia de muitos dados, de uma mesma tabela, referenciamos a mesma como uma rela\u00e7\u00e3o de muitas para muitas, segue o exemplo: public class Match : BaseDomainObject { public int HomeTeamId { get ; set ; } public virtual Team HomeTeam { get ; set ; } public int AwayTeamId { get ; set ; } public virtual Team AwayTeam { get ; set ; } public DateTime Date { get ; set ; } } Nesta classe, ela referencia a varios times, de duas maneiras distintas, sendo eles jogos que o time era o da casa, e jogos que eles eram convidados. Por conta desta altera\u00e7\u00e3o na rela\u00e7\u00e3o das tabelas, foram modificadas as classes anteriores, e agora est\u00e3o: public class Team : BaseDomainObject { public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } public virtual List < Match > HomeMatches { get ; set ; } public virtual List < Match > AwayMatches { get ; set ; } } public class League : BaseDomainObject { public string Name { get ; set ; } public List < Team > Teams { get ; set ; } } Ambas as classes de Times e Ligas, agora herdam de uma classe de objetoBasico, que tem intuito de possuir todos os campos padr\u00e3o das tabelas, como por exemplo Id","title":"1.2.8.2 Rela\u00e7\u00f5es muitos para muitos"},{"location":"C%23/csharp-database-related/#1283-relacoes-1-para-1","text":"Para exemplificar a rela\u00e7\u00e3o de um para um, iremos criar um exemplo, onde uma classe de Treinador (Coach), ser\u00e1 criada, onde um Time possu\u00ed um Treinador, e um Treinador treina somente um Time. Codigo da classe do Treinador: public class Coach : BaseDomainObject { public string Name { get ; set ; } public int? TeamId { get ; set ; } public virtual Team Team { get ; set ; } } E por consequencia, devemos referenciar esse treinador na classe de Times: public class Team : BaseDomainObject { public string Name { get ; set ; } public int LeagueId { get ; set ; } public virtual League League { get ; set ; } public virtual Coach Coach { get ; set ; } public virtual List < Match > HomeMatches { get ; set ; } public virtual List < Match > AwayMatches { get ; set ; } } E tambem devemos referenciar essa nova tabela em nosso DbContext, para quando rodarmos a migration, essa tabela e suas rela\u00e7\u00f5es serem alteradas de maneira correta. public DbSet < Coach > Coaches { get ; set ; }","title":"1.2.8.3 Rela\u00e7\u00f5es 1 para 1"},{"location":"C%23/csharp-database-related/#129-procedures","text":"A ser add","title":"1.2.9 Procedures"},{"location":"C%23/csharp-database-related/#1210-raw-sql","text":"Podemos mesmo utilizando EF Core , fazer uso de queries passadas manualmente, segue exemplo: Caso sabemos o tipo que ser\u00e1 retornado, e queremos exatamente , como est\u00e1 na model: public async Task < List < League >> SearchLeagueByNameRawSql ( string name ) { var league = await _context . Leagues . FromSqlRaw ( $\"select * from league where name = '{name}'\" ). ToListAsync (); /* Maneira incorreta, pois desta forma estamos tirando a parametriza\u00e7\u00e3o, e ficamos suscet\u00edveis a sql injections */ var league2 = await _context . Leagues . FromSqlRaw ( \"select * from league where name = {0}\" , name ). ToListAsync (); /* Maneira correta, pois desta forma estamos inserindo a parametriza\u00e7\u00e3o*/ var league3 = await _context . Leagues . FromSqlInterpolated ( $\"select * from league where name = {name}\" ). ToListAsync (); /* Outra forma de utilizarmos query SQL, com entity framework, desta forma ele automaticamente parametriza os valores para n\u00f3s*/ return league ; } No exemplo acima fizemos uso das fun\u00e7\u00f5es SqlRaw e SqlInterpolated , suas diferen\u00e7as s\u00e3o, que utilizando a primeira forma, devemos passar a parametriza\u00e7\u00e3o, nos mesmos, afim de evitar possiveis ataques de Sql injection , j\u00e1 a segunda op\u00e7\u00e3o, ja faz essa trabalho para n\u00f3s. Caso sabemos o tipo que ser\u00e1 retornado, por\u00e9m queremos menos colunas, ou at\u00e9 mesmo nem sabemos o que ser\u00e1 retornado (sem ter uma model feita para ele):","title":"1.2.10 Raw SQL"},{"location":"C%23/csharp-database-related/#1211-manipulando-banco","text":"A ser add","title":"1.2.11 Manipulando banco"},{"location":"C%23/csharp-database-related/#1212-eager-loading","text":"Quando necessitamos retornar dados, que envolvem multiplas tabelas (joins), precisamos fazer o Eager Loading , basicamente joins , onde o EF core consegue fazer automaticamente, somente incluindo o .Include(lambda expression), o Include deve ser posicionado antes de qualquer comando de retorno. Ex: Retornar informa\u00e7\u00e3o de qual liga pertence tal time: Sem Eager Loading public async void GeneralTeamSearch () { var teams = await _context . Teams . ToListAsync (); foreach ( var team in teams ) { var league = await _context . Leagues . Where ( league => league . Id == team . LeagueId ). FirstOrDefaultAsync (); team . PrintData ( league ); } } Com Eager Loading public async void GeneralTeamSearch () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . League ). ToListAsync (); foreach ( var team in teams ) { team . PrintData (); } } Eager Loading com multiplas referencias ( Gran Children related record ), \u00e9 reservado pela palavra Then Include . public async void GetTeamsWithMatchesAndOpponents () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . AwayMatches ). ThenInclude ( teamProperty => teamProperty . HomeTeam ). ToListAsync (); foreach ( var team in teams ) { team . PrintData (); // Visto que necessitamos atualizar o metodo PrintData para retornar as novas informa\u00e7\u00f5es destes joins } } Tambem podemos utilizar diversos Includes: public async void GetTeamsWithMatchesAndOpponents () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . AwayMatches ). ThenInclude ( teamProperty => teamProperty . HomeTeam ) . Include ( teamProperty => teamProperty . HomeMatches ). ThenInclude ( teamProperty => teamProperty . AwayTeam ). ToListAsync (); foreach ( var team in teams ) { team . PrintData (); // Visto que necessitamos atualizar o metodo PrintData para retornar as novas informa\u00e7\u00f5es destes joins } } Exemplo Anterior retornando treinadores: public async void GetTeamsWithMatchesAndOpponents () { var teams = await _context . Teams . Include ( teamProperty => teamProperty . AwayMatches ). ThenInclude ( teamProperty => teamProperty . HomeTeam ). ThenInclude ( teamProperty => teamProperty . Coach ) . Include ( teamProperty => teamProperty . HomeMatches ). ThenInclude ( teamProperty => teamProperty . AwayTeam ). ThenInclude ( teamProperty => teamProperty . Coach ) . ToListAsync (); foreach ( var team in teams ) { team . PrintData (); // Visto que necessitamos atualizar o metodo PrintData para retornar as novas informa\u00e7\u00f5es destes joins } }","title":"1.2.12 Eager Loading"},{"location":"C%23/csharp-database-related/#1213-database-transaction","text":"Durante o processo de desenvolvimento, podemos encontrar casos, onde necessitamos fazer varias coisas ao mesmo tempo, at\u00e9 mesmo, salvar uma entidade para chamar-mos a mesma logo abaixo na mesma fun\u00e7\u00e3o, por quest\u00e3o de dependencia. Para estes casos, podemos criar uma Transaction, onde dizemos para o banco de dados, fa\u00e7a isto, caso falhe n\u00e3o suba, segue o exemplo: public async Task AddNewLeague () { try { var transaction = _context . Database . BeginTransaction (); // <- Isto \u00e9 como criamos a transaction var league = new League ( parametros ); await _context . AddAsync ( league ); await _context . SaveChangesAsync ( league ); await AddTeamsWithLeague ( league ); // <- Esta fun\u00e7\u00e3o depende que a liga exista, por isto criamos e salvamos a mesma antes. await _context . SaveChangesAsync (); // <- Supor que aqui falhe, teriamos sem a transaction, criado uma liga, porem a fun\u00e7\u00e3o acima poderia ter falhado por alguma raz\u00e3o. Ou at\u00e9 mesmo se n\u00e3o tivessemos salvado a liga, ela teria falhado por conta que a liga que passamos no parametro, n\u00e3o existe. transaction . Commit (); // <- Caso nenhum erro ocorra, ai sim salvamos no banco de dados. } catch ( exepction ) { transaction . Rollback (); // <- Cancela as altera\u00e7\u00f5es } } Ou caso queremos salvar um snapshot de algo que fizemos, e outra parte do codigo falhou: public async Task AddNewLeague () { try { var transaction = _context . Database . BeginTransaction (); // <- Isto \u00e9 como criamos a transaction var league = new League ( parametros ); await _context . AddAsync ( league ); await _context . SaveChangesAsync ( league ); await transaction . CreateSavepointAsync ( \"Nome do Savepoint\" ); await AddTeamsWithLeague ( league ); // <- Esta fun\u00e7\u00e3o depende que a liga exista, por isto criamos e salvamos a mesma antes. await _context . SaveChangesAsync (); // <- Supor que aqui falhe, teriamos sem a transaction, criado uma liga, porem a fun\u00e7\u00e3o acima poderia ter falhado por alguma raz\u00e3o. Ou at\u00e9 mesmo se n\u00e3o tivessemos salvado a liga, ela teria falhado por conta que a liga que passamos no parametro, n\u00e3o existe. transaction . Commit (); // <- Caso nenhum erro ocorra, ai sim salvamos no banco de dados. } catch ( exepction ) { transaction . RollbackToSavepointAsync ( \"Nome do Savepoint\" ); // <- Retorna o estado do banco de dados no momento que salvamos o savepoint } }","title":"1.2.13 Database Transaction"},{"location":"C%23/csharp-database-related/#13-via-dapper","text":"Nesta se\u00e7\u00e3o ser\u00e1 demonstrado como fazer CRUD (Acronimo para Create, Read, Update, Delete), em uma Web API, utilizando Dapper.","title":"1.3 Via Dapper"},{"location":"C%23/csharp-database-related/#131-requerimentos","text":"Para utilizar o que v\u00eam a seguir, \u00e9 necessario: A instala\u00e7\u00e3o dos seguintes pacotes NuGet: Dapper.","title":"1.3.1 Requerimentos"},{"location":"Docker/docker-main-comands/","text":"Principais Comandos do Docker O que \u00e9 Docker? Docker \u00e9 um sistema de virtualiza\u00e7\u00e3o n\u00e3o convencional, diferente de uma VM ( virtual machine ), docker utiliza o conceito de Conteiners para isolar um ambiente de desenvolvimento e suas dependencias. O que \u00e9 container? 1.0 Adquirir uma imagem Para podermos acessar uma imagem, utilizaremos os seguinte comando: Por padr\u00e3o o docker faz pull de suas imagens atrav\u00e9s do docker hub docker pull \"Image name\" ex: docker pull redis 1.1 Rodar uma imagem Para podermos rodar uma imagem, utilizaremos os seguinte comando: docker run \"Image name\" ex: docker run redis Um comando secundario a esse, seria especificar a porta antes de executar o comando. utilizando o -p docker run -p 6379 :6379 redis 1.2 Enviar uma imagem Para podermos enviar uma imagem, utilizaremos os seguinte comando: docker pull \"Image name\" ex: docker pull redis Este comando \u00e9 utilizado para enviar uma imagem para o repositorio docker hub.","title":"Comandos Primordiais"},{"location":"Docker/docker-main-comands/#principais-comandos-do-docker","text":"","title":"Principais Comandos do Docker"},{"location":"Docker/docker-main-comands/#o-que-e-docker","text":"Docker \u00e9 um sistema de virtualiza\u00e7\u00e3o n\u00e3o convencional, diferente de uma VM ( virtual machine ), docker utiliza o conceito de Conteiners para isolar um ambiente de desenvolvimento e suas dependencias. O que \u00e9 container?","title":"O que \u00e9 Docker?"},{"location":"Docker/docker-main-comands/#10-adquirir-uma-imagem","text":"Para podermos acessar uma imagem, utilizaremos os seguinte comando: Por padr\u00e3o o docker faz pull de suas imagens atrav\u00e9s do docker hub docker pull \"Image name\" ex: docker pull redis","title":"1.0 Adquirir uma imagem"},{"location":"Docker/docker-main-comands/#11-rodar-uma-imagem","text":"Para podermos rodar uma imagem, utilizaremos os seguinte comando: docker run \"Image name\" ex: docker run redis Um comando secundario a esse, seria especificar a porta antes de executar o comando. utilizando o -p docker run -p 6379 :6379 redis","title":"1.1 Rodar uma imagem"},{"location":"Docker/docker-main-comands/#12-enviar-uma-imagem","text":"Para podermos enviar uma imagem, utilizaremos os seguinte comando: docker pull \"Image name\" ex: docker pull redis Este comando \u00e9 utilizado para enviar uma imagem para o repositorio docker hub.","title":"1.2 Enviar uma imagem"},{"location":"Java/java-database-related/","text":"Java - Database related content","title":"Database-related"},{"location":"Java/java-database-related/#java-database-related-content","text":"","title":"Java - Database related content"},{"location":"Node.js/nodejs-database-related/","text":"NodeJs - Database related content","title":"Database-related"},{"location":"Node.js/nodejs-database-related/#nodejs-database-related-content","text":"","title":"NodeJs - Database related content"},{"location":"Python/python-database-related/","text":"Python - Database related content","title":"Python - Database related content"},{"location":"Python/python-database-related/#python-database-related-content","text":"","title":"Python - Database related content"},{"location":"React/react-database-related/","text":"React - Database related content","title":"Database-related"},{"location":"React/react-database-related/#react-database-related-content","text":"","title":"React - Database related content"},{"location":"ReactNative/reactnative-database-related/","text":"React Native - Database related content","title":"Database-related"},{"location":"ReactNative/reactnative-database-related/#react-native-database-related-content","text":"","title":"React Native - Database related content"},{"location":"SQL/create-index/","text":"Criar Index 1.0 Quais os beneficios de se criar um index?","title":"Cria\u00e7\u00e3o de Index"},{"location":"SQL/create-index/#criar-index","text":"","title":"Criar Index"},{"location":"SQL/create-index/#10-quais-os-beneficios-de-se-criar-um-index","text":"","title":"1.0 Quais os beneficios de se criar um index?"},{"location":"SQL/non-relational-database/","text":"NO-SQL (No relational Database)","title":"Banco n\u00e3o relacional"},{"location":"SQL/non-relational-database/#no-sql-no-relational-database","text":"","title":"NO-SQL (No relational Database)"},{"location":"SQL/relational-database/","text":"Relacional Database","title":"Banco relacional"},{"location":"SQL/relational-database/#relacional-database","text":"","title":"Relacional Database"},{"location":"logic/data-structure/","text":"Estrutura de Dados","title":"Estrutura de dados"},{"location":"logic/data-structure/#estrutura-de-dados","text":"","title":"Estrutura de Dados"}]}